{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.\\_]+"},"docs":[{"location":"","text":"Welcome to MkDocs \uf0c1 For full documentation visit mkdocs.org . Commands \uf0c1 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \uf0c1 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"TridentRouter/","text":"Router contract that helps in swapping across Trident pools. Functions \uf0c1 constructor \uf0c1 function constructor ( ) public receive \uf0c1 function receive ( ) external exactInputSingle \uf0c1 function exactInputSingle ( struct ITridentRouter . ExactInputSingleParams params ) public returns ( uint256 amountOut ) Swaps token A to token B directly. Swaps are done on bento tokens. Ensure that the pool is trusted before calling this function. The pool can steal users\u2019 tokens. Parameters: Name Type Description params struct ITridentRouter.ExactInputSingleParams This includes the address of token A, pool, amount of token A to swap, minimum amount of token B after the swap and data required by the pool for the swap. exactInput \uf0c1 function exactInput ( struct ITridentRouter . ExactInputParams params ) public returns ( uint256 amountOut ) Swaps token A to token B indirectly by using multiple hops. Ensure that the pools are trusted before calling this function. The pools can steal users\u2019 tokens. Parameters: Name Type Description params struct ITridentRouter.ExactInputParams This includes the addresses of the tokens, pools, amount of token A to swap, minimum amount of token B after the swap and data required by the pools for the swaps. exactInputLazy \uf0c1 function exactInputLazy ( uint256 path , struct ITridentRouter . Path [] amountOutMinimum ) public returns ( uint256 amountOut ) Swaps token A to token B by using callbacks. Ensure that the pools are trusted before calling this function. The pools can steal users\u2019 tokens. This function will unlikely be used in production but it shows how to use callbacks. One use case will be arbitrage. Parameters: Name Type Description path uint256 Addresses of the pools and data required by the pools for the swaps. amountOutMinimum struct ITridentRouter.Path[] Minimum amount of token B after the swap. exactInputSingleWithNativeToken \uf0c1 function exactInputSingleWithNativeToken ( struct ITridentRouter . ExactInputSingleParams params ) public returns ( uint256 amountOut ) Swaps token A to token B directly. It\u2019s the same as exactInputSingle except it takes raw ERC-20 tokens from the users and deposits them into bento . Ensure that the pool is trusted before calling this function. The pool can steal users\u2019 tokens. Parameters: Name Type Description params struct ITridentRouter.ExactInputSingleParams This includes the address of token A, pool, amount of token A to swap, minimum amount of token B after the swap and data required by the pool for the swap. exactInputWithNativeToken \uf0c1 function exactInputWithNativeToken ( struct ITridentRouter . ExactInputParams params ) public returns ( uint256 amountOut ) Swaps token A to token B indirectly by using multiple hops. It\u2019s the same as exactInput except it takes raw ERC-20 tokens from the users and deposits them into bento . Ensure that the pools are trusted before calling this function. The pools can steal users\u2019 tokens. Parameters: Name Type Description params struct ITridentRouter.ExactInputParams This includes the addresses of the tokens, pools, amount of token A to swap, minimum amount of token B after the swap and data required by the pools for the swaps. complexPath \uf0c1 function complexPath ( struct ITridentRouter . ComplexPathParams params ) public Swaps multiple input tokens to multiple output tokens using multiple paths, in different percentages. For example, you can swap 50 DAI + 100 USDC into 60% ETH and 40% BTC. This function is not optimized for single swaps and should only be used in complex cases where the amounts are large enough that minimizing slippage by using multiple paths is worth the extra gas. Parameters: Name Type Description params struct ITridentRouter.ComplexPathParams This includes everything needed for the swap. Look at the ComplexPathParams struct for more details. addLiquidity \uf0c1 function addLiquidity ( struct ITridentRouter . TokenInput [] tokenInput , address pool , uint256 minLiquidity , bytes data ) public returns ( uint256 liquidity ) Add liquidity to a pool. Parameters: Name Type Description tokenInput struct ITridentRouter.TokenInput[] Token address and amount to add as liquidity. pool address Pool address to add liquidity to. minLiquidity uint256 Minimum output liquidity - caps slippage. data bytes Data required by the pool to add liquidity. addLiquidityLazy \uf0c1 function addLiquidityLazy ( ) public returns ( uint256 liquidity ) Add liquidity to a pool using callbacks - same as addLiquidity , but now with callbacks. The input tokens are sent to the pool during the callback. burnLiquidity \uf0c1 function burnLiquidity ( address pool , uint256 liquidity , bytes data , struct IPool . TokenAmount [] minWithdrawals ) public Burn liquidity tokens to get back bento tokens. Parameters: Name Type Description pool address Pool address. liquidity uint256 Amount of liquidity tokens to burn. data bytes Data required by the pool to burn liquidity. minWithdrawals struct IPool.TokenAmount[] Minimum amount of bento tokens to be returned. burnLiquiditySingle \uf0c1 function burnLiquiditySingle ( address pool , uint256 liquidity , bytes data , uint256 minWithdrawal ) public Burn liquidity tokens to get back bento tokens. The tokens are swapped automatically and the output is in a single token. Parameters: Name Type Description pool address Pool address. liquidity uint256 Amount of liquidity tokens to burn. data bytes Data required by the pool to burn liquidity. minWithdrawal uint256 Minimum amount of tokens to be returned. tridentSwapCallback \uf0c1 function tridentSwapCallback ( ) external Used by the pool \u2018flashSwap\u2019 functionality to take input tokens from the user. tridentMintCallback \uf0c1 function tridentMintCallback ( ) external Can be used by the pool \u2018mint\u2019 functionality to take tokens from the user. sweepBentoBoxToken \uf0c1 function sweepBentoBoxToken ( ) external Recover mistakenly sent bento tokens. sweepNativeToken \uf0c1 function sweepNativeToken ( ) external Recover mistakenly sent ERC-20 tokens. refundETH \uf0c1 function refundETH ( ) external Recover mistakenly sent ETH. unwrapWETH \uf0c1 function unwrapWETH ( ) external Unwrap this contract\u2019s wETH into ETH deployPool \uf0c1 function deployPool ( ) external returns ( address ) _depositToBentoBox \uf0c1 function _depositToBentoBox ( ) internal _depositFromUserToBentoBox \uf0c1 function _depositFromUserToBentoBox ( ) internal isWhiteListed \uf0c1 function isWhiteListed ( ) internal","title":"TridentRouter"},{"location":"TridentRouter/#functions","text":"","title":"Functions"},{"location":"TridentRouter/#constructor","text":"function constructor ( ) public","title":"constructor"},{"location":"TridentRouter/#receive","text":"function receive ( ) external","title":"receive"},{"location":"TridentRouter/#exactinputsingle","text":"function exactInputSingle ( struct ITridentRouter . ExactInputSingleParams params ) public returns ( uint256 amountOut ) Swaps token A to token B directly. Swaps are done on bento tokens. Ensure that the pool is trusted before calling this function. The pool can steal users\u2019 tokens.","title":"exactInputSingle"},{"location":"TridentRouter/#exactinput","text":"function exactInput ( struct ITridentRouter . ExactInputParams params ) public returns ( uint256 amountOut ) Swaps token A to token B indirectly by using multiple hops. Ensure that the pools are trusted before calling this function. The pools can steal users\u2019 tokens.","title":"exactInput"},{"location":"TridentRouter/#exactinputlazy","text":"function exactInputLazy ( uint256 path , struct ITridentRouter . Path [] amountOutMinimum ) public returns ( uint256 amountOut ) Swaps token A to token B by using callbacks. Ensure that the pools are trusted before calling this function. The pools can steal users\u2019 tokens. This function will unlikely be used in production but it shows how to use callbacks. One use case will be arbitrage.","title":"exactInputLazy"},{"location":"TridentRouter/#exactinputsinglewithnativetoken","text":"function exactInputSingleWithNativeToken ( struct ITridentRouter . ExactInputSingleParams params ) public returns ( uint256 amountOut ) Swaps token A to token B directly. It\u2019s the same as exactInputSingle except it takes raw ERC-20 tokens from the users and deposits them into bento . Ensure that the pool is trusted before calling this function. The pool can steal users\u2019 tokens.","title":"exactInputSingleWithNativeToken"},{"location":"TridentRouter/#exactinputwithnativetoken","text":"function exactInputWithNativeToken ( struct ITridentRouter . ExactInputParams params ) public returns ( uint256 amountOut ) Swaps token A to token B indirectly by using multiple hops. It\u2019s the same as exactInput except it takes raw ERC-20 tokens from the users and deposits them into bento . Ensure that the pools are trusted before calling this function. The pools can steal users\u2019 tokens.","title":"exactInputWithNativeToken"},{"location":"TridentRouter/#complexpath","text":"function complexPath ( struct ITridentRouter . ComplexPathParams params ) public Swaps multiple input tokens to multiple output tokens using multiple paths, in different percentages. For example, you can swap 50 DAI + 100 USDC into 60% ETH and 40% BTC. This function is not optimized for single swaps and should only be used in complex cases where the amounts are large enough that minimizing slippage by using multiple paths is worth the extra gas.","title":"complexPath"},{"location":"TridentRouter/#addliquidity","text":"function addLiquidity ( struct ITridentRouter . TokenInput [] tokenInput , address pool , uint256 minLiquidity , bytes data ) public returns ( uint256 liquidity ) Add liquidity to a pool.","title":"addLiquidity"},{"location":"TridentRouter/#addliquiditylazy","text":"function addLiquidityLazy ( ) public returns ( uint256 liquidity ) Add liquidity to a pool using callbacks - same as addLiquidity , but now with callbacks. The input tokens are sent to the pool during the callback.","title":"addLiquidityLazy"},{"location":"TridentRouter/#burnliquidity","text":"function burnLiquidity ( address pool , uint256 liquidity , bytes data , struct IPool . TokenAmount [] minWithdrawals ) public Burn liquidity tokens to get back bento tokens.","title":"burnLiquidity"},{"location":"TridentRouter/#burnliquiditysingle","text":"function burnLiquiditySingle ( address pool , uint256 liquidity , bytes data , uint256 minWithdrawal ) public Burn liquidity tokens to get back bento tokens. The tokens are swapped automatically and the output is in a single token.","title":"burnLiquiditySingle"},{"location":"TridentRouter/#tridentswapcallback","text":"function tridentSwapCallback ( ) external Used by the pool \u2018flashSwap\u2019 functionality to take input tokens from the user.","title":"tridentSwapCallback"},{"location":"TridentRouter/#tridentmintcallback","text":"function tridentMintCallback ( ) external Can be used by the pool \u2018mint\u2019 functionality to take tokens from the user.","title":"tridentMintCallback"},{"location":"TridentRouter/#sweepbentoboxtoken","text":"function sweepBentoBoxToken ( ) external Recover mistakenly sent bento tokens.","title":"sweepBentoBoxToken"},{"location":"TridentRouter/#sweepnativetoken","text":"function sweepNativeToken ( ) external Recover mistakenly sent ERC-20 tokens.","title":"sweepNativeToken"},{"location":"TridentRouter/#refundeth","text":"function refundETH ( ) external Recover mistakenly sent ETH.","title":"refundETH"},{"location":"TridentRouter/#unwrapweth","text":"function unwrapWETH ( ) external Unwrap this contract\u2019s wETH into ETH","title":"unwrapWETH"},{"location":"TridentRouter/#deploypool","text":"function deployPool ( ) external returns ( address )","title":"deployPool"},{"location":"TridentRouter/#_deposittobentobox","text":"function _depositToBentoBox ( ) internal","title":"_depositToBentoBox"},{"location":"TridentRouter/#_depositfromusertobentobox","text":"function _depositFromUserToBentoBox ( ) internal","title":"_depositFromUserToBentoBox"},{"location":"TridentRouter/#iswhitelisted","text":"function isWhiteListed ( ) internal","title":"isWhiteListed"},{"location":"config/","text":"Config \uf0c1 foo \uf0c1 Type: string Default: / bar \uf0c1 Type: string Default: /","title":"Config"},{"location":"config/#config","text":"","title":"Config"},{"location":"config/#foo","text":"Type: string Default: /","title":"foo"},{"location":"config/#bar","text":"Type: string Default: /","title":"bar"},{"location":"deployer/MasterDeployer/","text":"Trident pool deployer contract with template factory whitelist. Functions \uf0c1 constructor \uf0c1 function constructor ( ) public deployPool \uf0c1 function deployPool ( ) external returns ( address pool ) addToWhitelist \uf0c1 function addToWhitelist ( ) external removeFromWhitelist \uf0c1 function removeFromWhitelist ( ) external setBarFee \uf0c1 function setBarFee ( ) external setMigrator \uf0c1 function setMigrator ( ) external Events \uf0c1 DeployPool \uf0c1 event DeployPool ( ) AddToWhitelist \uf0c1 event AddToWhitelist ( ) RemoveFromWhitelist \uf0c1 event RemoveFromWhitelist ( ) BarFeeUpdated \uf0c1 event BarFeeUpdated ( ) MigratorUpdated \uf0c1 event MigratorUpdated ( )","title":"MasterDeployer"},{"location":"deployer/MasterDeployer/#functions","text":"","title":"Functions"},{"location":"deployer/MasterDeployer/#constructor","text":"function constructor ( ) public","title":"constructor"},{"location":"deployer/MasterDeployer/#deploypool","text":"function deployPool ( ) external returns ( address pool )","title":"deployPool"},{"location":"deployer/MasterDeployer/#addtowhitelist","text":"function addToWhitelist ( ) external","title":"addToWhitelist"},{"location":"deployer/MasterDeployer/#removefromwhitelist","text":"function removeFromWhitelist ( ) external","title":"removeFromWhitelist"},{"location":"deployer/MasterDeployer/#setbarfee","text":"function setBarFee ( ) external","title":"setBarFee"},{"location":"deployer/MasterDeployer/#setmigrator","text":"function setMigrator ( ) external","title":"setMigrator"},{"location":"deployer/MasterDeployer/#events","text":"","title":"Events"},{"location":"deployer/MasterDeployer/#deploypool_1","text":"event DeployPool ( )","title":"DeployPool"},{"location":"deployer/MasterDeployer/#addtowhitelist_1","text":"event AddToWhitelist ( )","title":"AddToWhitelist"},{"location":"deployer/MasterDeployer/#removefromwhitelist_1","text":"event RemoveFromWhitelist ( )","title":"RemoveFromWhitelist"},{"location":"deployer/MasterDeployer/#barfeeupdated","text":"event BarFeeUpdated ( )","title":"BarFeeUpdated"},{"location":"deployer/MasterDeployer/#migratorupdated","text":"event MigratorUpdated ( )","title":"MigratorUpdated"},{"location":"examples/PoolFactory/","text":"Functions \uf0c1 deployPool \uf0c1 function deployPool ( ) external returns ( address )","title":"PoolFactory"},{"location":"examples/PoolFactory/#functions","text":"","title":"Functions"},{"location":"examples/PoolFactory/#deploypool","text":"function deployPool ( ) external returns ( address )","title":"deployPool"},{"location":"examples/PoolTemplate/","text":"Functions \uf0c1 constructor \uf0c1 function constructor ( ) public","title":"PoolTemplate"},{"location":"examples/PoolTemplate/#functions","text":"","title":"Functions"},{"location":"examples/PoolTemplate/#constructor","text":"function constructor ( ) public","title":"constructor"},{"location":"guide/","text":"Introduction \uf0c1 VuePress is composed of two parts: a minimalistic static site generator with a Vue-powered theming system and Plugin API , and a default theme optimized for writing technical documentation. It was created to support the documentation needs of Vue\u2019s own sub projects. Each page generated by VuePress has its own pre-rendered static HTML, providing great loading performance and is SEO-friendly. Once the page is loaded, however, Vue takes over the static content and turns it into a full Single-Page Application (SPA). Additional pages are fetched on demand as the user navigates around the site.","title":"Introduction"},{"location":"guide/#introduction","text":"VuePress is composed of two parts: a minimalistic static site generator with a Vue-powered theming system and Plugin API , and a default theme optimized for writing technical documentation. It was created to support the documentation needs of Vue\u2019s own sub projects. Each page generated by VuePress has its own pre-rendered static HTML, providing great loading performance and is SEO-friendly. Once the page is loaded, however, Vue takes over the static content and turns it into a full Single-Page Application (SPA). Additional pages are fetched on demand as the user navigates around the site.","title":"Introduction"},{"location":"guide/using-vue/","text":"Using Vue in Markdown \uf0c1 Browser API Access Restrictions \uf0c1 Because VuePress applications are server-rendered in Node.js when generating static builds, any Vue usage must conform to the universal code requirements . In short, make sure to only access Browser / DOM APIs in beforeMount or mounted hooks. If you are using or demoing components that are not SSR friendly (for example containing custom directives), you can wrap them inside the built-in <ClientOnly> component: \uf0c1","title":"Using Vue in Markdown"},{"location":"guide/using-vue/#using-vue-in-markdown","text":"","title":"Using Vue in Markdown"},{"location":"guide/using-vue/#browser-api-access-restrictions","text":"Because VuePress applications are server-rendered in Node.js when generating static builds, any Vue usage must conform to the universal code requirements . In short, make sure to only access Browser / DOM APIs in beforeMount or mounted hooks. If you are using or demoing components that are not SSR friendly (for example containing custom directives), you can wrap them inside the built-in <ClientOnly> component:","title":"Browser API Access Restrictions"},{"location":"guide/using-vue/#_1","text":"","title":""},{"location":"interfaces/IBentoBoxMinimal/","text":"Minimal BentoBox vault interface. token is aliased as address from IERC20 for simplicity. Functions \uf0c1 balanceOf \uf0c1 function balanceOf ( ) external returns ( uint256 ) Balance per ERC-20 token per account in shares. toShare \uf0c1 function toShare ( address token , uint256 amount , bool roundUp ) external returns ( uint256 share ) Helper function to represent an amount of token in shares. Parameters: Name Type Description token address The ERC-20 token. amount uint256 The token amount. roundUp bool If the result share should be rounded up. Return Values: Name Type Description share address The token amount represented in shares. toAmount \uf0c1 function toAmount ( address token , uint256 share , bool roundUp ) external returns ( uint256 amount ) Helper function to represent shares back into the token amount. Parameters: Name Type Description token address The ERC-20 token. share uint256 The amount of shares. roundUp bool If the result should be rounded up. Return Values: Name Type Description amount address The share amount back into native representation. registerProtocol \uf0c1 function registerProtocol ( ) external Registers this contract so that users can approve it for BentoBox. deposit \uf0c1 function deposit ( address token_ , address from , address to , uint256 amount , uint256 share ) external returns ( uint256 amountOut , uint256 shareOut ) Deposit an amount of token represented in either amount or share . Parameters: Name Type Description token_ address The ERC-20 token to deposit. from address which account to pull the tokens. to address which account to push the tokens. amount uint256 Token amount in native representation to deposit. share uint256 Token amount represented in shares to deposit. Takes precedence over amount . Return Values: Name Type Description amountOut address The amount deposited. shareOut address The deposited amount repesented in shares. withdraw \uf0c1 function withdraw ( address token_ , address from , address to , uint256 amount , uint256 share ) external returns ( uint256 amountOut , uint256 shareOut ) Withdraws an amount of token from a user account. Parameters: Name Type Description token_ address The ERC-20 token to withdraw. from address which user to pull the tokens. to address which user to push the tokens. amount uint256 of tokens. Either one of amount or share needs to be supplied. share uint256 Like above, but share takes precedence over amount . transfer \uf0c1 function transfer ( address token , address from , address to , uint256 share ) external Transfer shares from a user account to another one. Parameters: Name Type Description token address The ERC-20 token to transfer. from address which user to pull the tokens. to address which user to push the tokens. share uint256 The amount of token in shares. totals \uf0c1 function totals ( ) external returns ( struct Rebase total ) Reads the Rebase totals from storage for a given token","title":"IBentoBoxMinimal"},{"location":"interfaces/IBentoBoxMinimal/#functions","text":"","title":"Functions"},{"location":"interfaces/IBentoBoxMinimal/#balanceof","text":"function balanceOf ( ) external returns ( uint256 ) Balance per ERC-20 token per account in shares.","title":"balanceOf"},{"location":"interfaces/IBentoBoxMinimal/#toshare","text":"function toShare ( address token , uint256 amount , bool roundUp ) external returns ( uint256 share ) Helper function to represent an amount of token in shares.","title":"toShare"},{"location":"interfaces/IBentoBoxMinimal/#toamount","text":"function toAmount ( address token , uint256 share , bool roundUp ) external returns ( uint256 amount ) Helper function to represent shares back into the token amount.","title":"toAmount"},{"location":"interfaces/IBentoBoxMinimal/#registerprotocol","text":"function registerProtocol ( ) external Registers this contract so that users can approve it for BentoBox.","title":"registerProtocol"},{"location":"interfaces/IBentoBoxMinimal/#deposit","text":"function deposit ( address token_ , address from , address to , uint256 amount , uint256 share ) external returns ( uint256 amountOut , uint256 shareOut ) Deposit an amount of token represented in either amount or share .","title":"deposit"},{"location":"interfaces/IBentoBoxMinimal/#withdraw","text":"function withdraw ( address token_ , address from , address to , uint256 amount , uint256 share ) external returns ( uint256 amountOut , uint256 shareOut ) Withdraws an amount of token from a user account.","title":"withdraw"},{"location":"interfaces/IBentoBoxMinimal/#transfer","text":"function transfer ( address token , address from , address to , uint256 share ) external Transfer shares from a user account to another one.","title":"transfer"},{"location":"interfaces/IBentoBoxMinimal/#totals","text":"function totals ( ) external returns ( struct Rebase total ) Reads the Rebase totals from storage for a given token","title":"totals"},{"location":"interfaces/IMasterDeployer/","text":"Trident pool deployer interface. Functions \uf0c1 barFee \uf0c1 function barFee ( ) external returns ( uint256 ) barFeeTo \uf0c1 function barFeeTo ( ) external returns ( address ) bento \uf0c1 function bento ( ) external returns ( address ) migrator \uf0c1 function migrator ( ) external returns ( address ) deployPool \uf0c1 function deployPool ( ) external returns ( address )","title":"IMasterDeployer"},{"location":"interfaces/IMasterDeployer/#functions","text":"","title":"Functions"},{"location":"interfaces/IMasterDeployer/#barfee","text":"function barFee ( ) external returns ( uint256 )","title":"barFee"},{"location":"interfaces/IMasterDeployer/#barfeeto","text":"function barFeeTo ( ) external returns ( address )","title":"barFeeTo"},{"location":"interfaces/IMasterDeployer/#bento","text":"function bento ( ) external returns ( address )","title":"bento"},{"location":"interfaces/IMasterDeployer/#migrator","text":"function migrator ( ) external returns ( address )","title":"migrator"},{"location":"interfaces/IMasterDeployer/#deploypool","text":"function deployPool ( ) external returns ( address )","title":"deployPool"},{"location":"interfaces/IPool/","text":"Trident pool interface. Functions \uf0c1 swap \uf0c1 function swap ( bytes data ) external returns ( uint256 finalAmountOut ) Executes a swap from one token to another. The input tokens must\u2019ve already been sent to the pool. Parameters: Name Type Description data bytes ABI-encoded params that the pool requires. Return Values: Name Type Description finalAmountOut bytes The amount of output tokens that were sent to the user. flashSwap \uf0c1 function flashSwap ( bytes data ) external returns ( uint256 finalAmountOut ) Executes a swap from one token to another with a callback. This function allows borrowing the output tokens and sending the input tokens in the callback. Parameters: Name Type Description data bytes ABI-encoded params that the pool requires. Return Values: Name Type Description finalAmountOut bytes The amount of output tokens that were sent to the user. mint \uf0c1 function mint ( bytes data ) external returns ( uint256 liquidity ) Mints liquidity tokens. The input tokens must\u2019ve already been sent to the pool. Parameters: Name Type Description data bytes ABI-encoded params that the pool requires. Return Values: Name Type Description liquidity bytes The amount of liquidity tokens that were minted for the user. burn \uf0c1 function burn ( bytes data ) external returns ( struct IPool . TokenAmount [] withdrawnAmounts ) Burns liquidity tokens. The input LP tokens must\u2019ve already been sent to the pool. Parameters: Name Type Description data bytes ABI-encoded params that the pool requires. Return Values: Name Type Description withdrawnAmounts bytes The amount of various output tokens that were sent to the user. burnSingle \uf0c1 function burnSingle ( bytes data ) external returns ( uint256 amountOut ) Burns liquidity tokens for a single output token. The input LP tokens must\u2019ve already been sent to the pool. Parameters: Name Type Description data bytes ABI-encoded params that the pool requires. Return Values: Name Type Description amountOut bytes The amount of output tokens that were sent to the user. poolIdentifier \uf0c1 function poolIdentifier ( ) external returns ( bytes32 ) Return Values: Name Type Description A unique identifier for the pool type. getAssets \uf0c1 function getAssets ( ) external returns ( address []) Return Values: Name Type Description An array of tokens supported by the pool. getAmountOut \uf0c1 function getAmountOut ( bytes data ) external returns ( uint256 finalAmountOut ) Simulates a trade and returns the expected output. The pool does not need to include a trade simulator directly in itself - it can use a library. Parameters: Name Type Description data bytes ABI-encoded params that the pool requires. Return Values: Name Type Description finalAmountOut bytes The amount of output tokens that will be sent to the user if the trade is executed. Events \uf0c1 Swap \uf0c1 event Swap ( ) This event must be emitted on all swaps.","title":"IPool"},{"location":"interfaces/IPool/#functions","text":"","title":"Functions"},{"location":"interfaces/IPool/#swap","text":"function swap ( bytes data ) external returns ( uint256 finalAmountOut ) Executes a swap from one token to another. The input tokens must\u2019ve already been sent to the pool.","title":"swap"},{"location":"interfaces/IPool/#flashswap","text":"function flashSwap ( bytes data ) external returns ( uint256 finalAmountOut ) Executes a swap from one token to another with a callback. This function allows borrowing the output tokens and sending the input tokens in the callback.","title":"flashSwap"},{"location":"interfaces/IPool/#mint","text":"function mint ( bytes data ) external returns ( uint256 liquidity ) Mints liquidity tokens. The input tokens must\u2019ve already been sent to the pool.","title":"mint"},{"location":"interfaces/IPool/#burn","text":"function burn ( bytes data ) external returns ( struct IPool . TokenAmount [] withdrawnAmounts ) Burns liquidity tokens. The input LP tokens must\u2019ve already been sent to the pool.","title":"burn"},{"location":"interfaces/IPool/#burnsingle","text":"function burnSingle ( bytes data ) external returns ( uint256 amountOut ) Burns liquidity tokens for a single output token. The input LP tokens must\u2019ve already been sent to the pool.","title":"burnSingle"},{"location":"interfaces/IPool/#poolidentifier","text":"function poolIdentifier ( ) external returns ( bytes32 )","title":"poolIdentifier"},{"location":"interfaces/IPool/#getassets","text":"function getAssets ( ) external returns ( address [])","title":"getAssets"},{"location":"interfaces/IPool/#getamountout","text":"function getAmountOut ( bytes data ) external returns ( uint256 finalAmountOut ) Simulates a trade and returns the expected output. The pool does not need to include a trade simulator directly in itself - it can use a library.","title":"getAmountOut"},{"location":"interfaces/IPool/#events","text":"","title":"Events"},{"location":"interfaces/IPool/#swap_1","text":"event Swap ( ) This event must be emitted on all swaps.","title":"Swap"},{"location":"interfaces/IPoolFactory/","text":"Trident pool deployment interface. Functions \uf0c1 deployPool \uf0c1 function deployPool ( ) external returns ( address pool )","title":"IPoolFactory"},{"location":"interfaces/IPoolFactory/#functions","text":"","title":"Functions"},{"location":"interfaces/IPoolFactory/#deploypool","text":"function deployPool ( ) external returns ( address pool )","title":"deployPool"},{"location":"interfaces/ITridentCallee/","text":"Trident pool callback interface. Functions \uf0c1 tridentSwapCallback \uf0c1 function tridentSwapCallback ( ) external tridentMintCallback \uf0c1 function tridentMintCallback ( ) external","title":"ITridentCallee"},{"location":"interfaces/ITridentCallee/#functions","text":"","title":"Functions"},{"location":"interfaces/ITridentCallee/#tridentswapcallback","text":"function tridentSwapCallback ( ) external","title":"tridentSwapCallback"},{"location":"interfaces/ITridentCallee/#tridentmintcallback","text":"function tridentMintCallback ( ) external","title":"tridentMintCallback"},{"location":"interfaces/ITridentRouter/","text":"Trident pool router interface.","title":"ITridentRouter"},{"location":"interfaces/IWhiteListManager/","text":"Trident franchised pool whitelist manager interface. Functions \uf0c1 whitelistedAccounts \uf0c1 function whitelistedAccounts ( ) external returns ( bool )","title":"IWhiteListManager"},{"location":"interfaces/IWhiteListManager/#functions","text":"","title":"Functions"},{"location":"interfaces/IWhiteListManager/#whitelistedaccounts","text":"function whitelistedAccounts ( ) external returns ( bool )","title":"whitelistedAccounts"},{"location":"libraries/MathUtils/","text":"A library that contains functions for calculating differences between two uint256. Functions \uf0c1 within1 \uf0c1 function within1 ( uint256 a , uint256 b ) internal returns ( bool ) Compares a and b and returns \u2018true\u2019 if the difference between a and b is less than 1 or equal to each other. Parameters: Name Type Description a uint256 uint256 to compare with. b uint256 uint256 to compare with.","title":"MathUtils"},{"location":"libraries/MathUtils/#functions","text":"","title":"Functions"},{"location":"libraries/MathUtils/#within1","text":"function within1 ( uint256 a , uint256 b ) internal returns ( bool ) Compares a and b and returns \u2018true\u2019 if the difference between a and b is less than 1 or equal to each other.","title":"within1"},{"location":"libraries/RebaseLibrary/","text":"A rebasing library Functions \uf0c1 toBase \uf0c1 function toBase ( ) internal returns ( uint256 base ) Calculates the base value in relationship to elastic and total . toElastic \uf0c1 function toElastic ( ) internal returns ( uint256 elastic ) Calculates the elastic value in relationship to base and total .","title":"RebaseLibrary"},{"location":"libraries/RebaseLibrary/#functions","text":"","title":"Functions"},{"location":"libraries/RebaseLibrary/#tobase","text":"function toBase ( ) internal returns ( uint256 base ) Calculates the base value in relationship to elastic and total .","title":"toBase"},{"location":"libraries/RebaseLibrary/#toelastic","text":"function toElastic ( ) internal returns ( uint256 elastic ) Calculates the elastic value in relationship to base and total .","title":"toElastic"},{"location":"mocks/ERC20Mock/","text":"Functions \uf0c1 constructor \uf0c1 function constructor ( ) public receive \uf0c1 function receive ( ) external deposit \uf0c1 function deposit ( ) public withdraw \uf0c1 function withdraw ( ) public Events \uf0c1 Deposit \uf0c1 event Deposit ( ) Withdrawal \uf0c1 event Withdrawal ( )","title":"ERC20Mock"},{"location":"mocks/ERC20Mock/#functions","text":"","title":"Functions"},{"location":"mocks/ERC20Mock/#constructor","text":"function constructor ( ) public","title":"constructor"},{"location":"mocks/ERC20Mock/#receive","text":"function receive ( ) external","title":"receive"},{"location":"mocks/ERC20Mock/#deposit","text":"function deposit ( ) public","title":"deposit"},{"location":"mocks/ERC20Mock/#withdraw","text":"function withdraw ( ) public","title":"withdraw"},{"location":"mocks/ERC20Mock/#events","text":"","title":"Events"},{"location":"mocks/ERC20Mock/#deposit_1","text":"event Deposit ( )","title":"Deposit"},{"location":"mocks/ERC20Mock/#withdrawal","text":"event Withdrawal ( )","title":"Withdrawal"},{"location":"mocks/TridentMathConsumerMock/","text":"Functions \uf0c1 sqrt \uf0c1 function sqrt ( ) public returns ( uint256 )","title":"TridentMathConsumerMock"},{"location":"mocks/TridentMathConsumerMock/#functions","text":"","title":"Functions"},{"location":"mocks/TridentMathConsumerMock/#sqrt","text":"function sqrt ( ) public returns ( uint256 )","title":"sqrt"},{"location":"mocks/WETH9/","text":"","title":"WETH9"},{"location":"pool/ConstantProductPool/","text":"Trident exchange pool template with constant product formula for swapping between an ERC-20 token pair. The reserves are stored as bento shares. The curve is applied to shares as well. This pool does not care about the underlying amounts. Functions \uf0c1 constructor \uf0c1 function constructor ( ) public mint \uf0c1 function mint ( ) public returns ( uint256 liquidity ) Mints LP tokens - should be called via the router after transferring bento tokens. The router must ensure that sufficient LP tokens are minted by using the return value. burn \uf0c1 function burn ( ) public returns ( struct IPool . TokenAmount [] withdrawnAmounts ) Burns LP tokens sent to this contract. The router must ensure that the user gets sufficient output tokens. burnSingle \uf0c1 function burnSingle ( ) public returns ( uint256 amountOut ) Burns LP tokens sent to this contract and swaps one of the output tokens for another i.e., the user gets a single token out by burning LP tokens. swap \uf0c1 function swap ( ) public returns ( uint256 amountOut ) Swaps one token for another. The router must prefund this contract and ensure there isn\u2019t too much slippage. flashSwap \uf0c1 function flashSwap ( ) public returns ( uint256 amountOut ) Swaps one token for another. The router must support swap callbacks and ensure there isn\u2019t too much slippage. updateBarFee \uf0c1 function updateBarFee ( ) public Updates barFee for Trident protocol. _getReserves \uf0c1 function _getReserves ( ) internal returns ( uint112 _reserve0 , uint112 _reserve1 , uint32 _blockTimestampLast ) _balance \uf0c1 function _balance ( ) internal returns ( uint256 balance0 , uint256 balance1 ) _update \uf0c1 function _update ( ) internal _mintFee \uf0c1 function _mintFee ( ) internal returns ( uint256 _totalSupply , uint256 computed ) _getAmountOut \uf0c1 function _getAmountOut ( ) internal returns ( uint256 amountOut ) _transfer \uf0c1 function _transfer ( ) internal _nonOptimalMintFee \uf0c1 function _nonOptimalMintFee ( ) internal returns ( uint256 token0Fee , uint256 token1Fee ) This fee is charged to cover for swapFee when users add unbalanced liquidity. getAssets \uf0c1 function getAssets ( ) public returns ( address [] assets ) getAmountOut \uf0c1 function getAmountOut ( ) public returns ( uint256 finalAmountOut ) getReserves \uf0c1 function getReserves ( ) public returns ( uint112 _reserve0 , uint112 _reserve1 , uint32 _blockTimestampLast ) Events \uf0c1 Mint \uf0c1 event Mint ( ) Burn \uf0c1 event Burn ( ) Sync \uf0c1 event Sync ( )","title":"ConstantProductPool"},{"location":"pool/ConstantProductPool/#functions","text":"","title":"Functions"},{"location":"pool/ConstantProductPool/#constructor","text":"function constructor ( ) public","title":"constructor"},{"location":"pool/ConstantProductPool/#mint","text":"function mint ( ) public returns ( uint256 liquidity ) Mints LP tokens - should be called via the router after transferring bento tokens. The router must ensure that sufficient LP tokens are minted by using the return value.","title":"mint"},{"location":"pool/ConstantProductPool/#burn","text":"function burn ( ) public returns ( struct IPool . TokenAmount [] withdrawnAmounts ) Burns LP tokens sent to this contract. The router must ensure that the user gets sufficient output tokens.","title":"burn"},{"location":"pool/ConstantProductPool/#burnsingle","text":"function burnSingle ( ) public returns ( uint256 amountOut ) Burns LP tokens sent to this contract and swaps one of the output tokens for another i.e., the user gets a single token out by burning LP tokens.","title":"burnSingle"},{"location":"pool/ConstantProductPool/#swap","text":"function swap ( ) public returns ( uint256 amountOut ) Swaps one token for another. The router must prefund this contract and ensure there isn\u2019t too much slippage.","title":"swap"},{"location":"pool/ConstantProductPool/#flashswap","text":"function flashSwap ( ) public returns ( uint256 amountOut ) Swaps one token for another. The router must support swap callbacks and ensure there isn\u2019t too much slippage.","title":"flashSwap"},{"location":"pool/ConstantProductPool/#updatebarfee","text":"function updateBarFee ( ) public Updates barFee for Trident protocol.","title":"updateBarFee"},{"location":"pool/ConstantProductPool/#_getreserves","text":"function _getReserves ( ) internal returns ( uint112 _reserve0 , uint112 _reserve1 , uint32 _blockTimestampLast )","title":"_getReserves"},{"location":"pool/ConstantProductPool/#_balance","text":"function _balance ( ) internal returns ( uint256 balance0 , uint256 balance1 )","title":"_balance"},{"location":"pool/ConstantProductPool/#_update","text":"function _update ( ) internal","title":"_update"},{"location":"pool/ConstantProductPool/#_mintfee","text":"function _mintFee ( ) internal returns ( uint256 _totalSupply , uint256 computed )","title":"_mintFee"},{"location":"pool/ConstantProductPool/#_getamountout","text":"function _getAmountOut ( ) internal returns ( uint256 amountOut )","title":"_getAmountOut"},{"location":"pool/ConstantProductPool/#_transfer","text":"function _transfer ( ) internal","title":"_transfer"},{"location":"pool/ConstantProductPool/#_nonoptimalmintfee","text":"function _nonOptimalMintFee ( ) internal returns ( uint256 token0Fee , uint256 token1Fee ) This fee is charged to cover for swapFee when users add unbalanced liquidity.","title":"_nonOptimalMintFee"},{"location":"pool/ConstantProductPool/#getassets","text":"function getAssets ( ) public returns ( address [] assets )","title":"getAssets"},{"location":"pool/ConstantProductPool/#getamountout","text":"function getAmountOut ( ) public returns ( uint256 finalAmountOut )","title":"getAmountOut"},{"location":"pool/ConstantProductPool/#getreserves","text":"function getReserves ( ) public returns ( uint112 _reserve0 , uint112 _reserve1 , uint32 _blockTimestampLast )","title":"getReserves"},{"location":"pool/ConstantProductPool/#events","text":"","title":"Events"},{"location":"pool/ConstantProductPool/#mint_1","text":"event Mint ( )","title":"Mint"},{"location":"pool/ConstantProductPool/#burn_1","text":"event Burn ( )","title":"Burn"},{"location":"pool/ConstantProductPool/#sync","text":"event Sync ( )","title":"Sync"},{"location":"pool/ConstantProductPoolFactory/","text":"Contract for deploying Trident exchange Constant Product Pool with configurations. Functions \uf0c1 constructor \uf0c1 function constructor ( ) public deployPool \uf0c1 function deployPool ( ) external returns ( address pool )","title":"ConstantProductPoolFactory"},{"location":"pool/ConstantProductPoolFactory/#functions","text":"","title":"Functions"},{"location":"pool/ConstantProductPoolFactory/#constructor","text":"function constructor ( ) public","title":"constructor"},{"location":"pool/ConstantProductPoolFactory/#deploypool","text":"function deployPool ( ) external returns ( address pool )","title":"deployPool"},{"location":"pool/HybridPool/","text":"Trident exchange pool template with hybrid like-kind formula for swapping between an ERC-20 token pair. The reserves are stored as bento shares. However, the stableswap invariant is applied to the underlying amounts. The API uses the underlying amounts. Functions \uf0c1 constructor \uf0c1 function constructor ( ) public mint \uf0c1 function mint ( ) public returns ( uint256 liquidity ) Mints LP tokens - should be called via the router after transferring bento tokens. The router must ensure that sufficient LP tokens are minted by using the return value. burn \uf0c1 function burn ( ) public returns ( struct IPool . TokenAmount [] withdrawnAmounts ) Burns LP tokens sent to this contract. The router must ensure that the user gets sufficient output tokens. burnSingle \uf0c1 function burnSingle ( ) public returns ( uint256 amountOut ) Burns LP tokens sent to this contract and swaps one of the output tokens for another i.e., the user gets a single token out by burning LP tokens. swap \uf0c1 function swap ( ) public returns ( uint256 amountOut ) Swaps one token for another. The router must prefund this contract and ensure there isn\u2019t too much slippage. flashSwap \uf0c1 function flashSwap ( ) public returns ( uint256 amountOut ) Swaps one token for another with payload. The router must support swap callbacks and ensure there isn\u2019t too much slippage. updateBarFee \uf0c1 function updateBarFee ( ) public Updates barFee for Trident protocol. _processSwap \uf0c1 function _processSwap ( ) internal _getReserves \uf0c1 function _getReserves ( ) internal returns ( uint256 _reserve0 , uint256 _reserve1 ) _getReservesAndBalances \uf0c1 function _getReservesAndBalances ( ) internal returns ( uint256 _reserve0 , uint256 _reserve1 , uint256 balance0 , uint256 balance1 ) _updateReserves \uf0c1 function _updateReserves ( ) internal _balance \uf0c1 function _balance ( ) internal returns ( uint256 balance0 , uint256 balance1 ) _getAmountOut \uf0c1 function _getAmountOut ( ) internal returns ( uint256 dy ) _transfer \uf0c1 function _transfer ( ) internal _computeLiquidity \uf0c1 function _computeLiquidity ( ) internal returns ( uint256 liquidity ) Get D, the StableSwap invariant, based on a set of balances and a particular A. See the StableSwap paper for details. Originally https://github.com/saddle-finance/saddle-contract/blob/0b76f7fb519e34b878aa1d58cffc8d8dc0572c12/contracts/SwapUtils.sol#L319 . Return Values: Name Type Description liquidity uint256 The invariant, at the precision of the pool. _computeLiquidityFromAdjustedBalances \uf0c1 function _computeLiquidityFromAdjustedBalances ( ) internal returns ( uint256 computed ) _getY \uf0c1 function _getY ( uint256 x ) internal returns ( uint256 y ) Calculate the new balances of the tokens given the indexes of the token that is swapped from (FROM) and the token that is swapped to (TO). This function is used as a helper function to calculate how much TO token the user should receive on swap. Originally https://github.com/saddle-finance/saddle-contract/blob/0b76f7fb519e34b878aa1d58cffc8d8dc0572c12/contracts/SwapUtils.sol#L432 . Parameters: Name Type Description x uint256 The new total amount of FROM token. Return Values: Name Type Description y uint256 The amount of TO token that should remain in the pool. _mintFee \uf0c1 function _mintFee ( ) internal returns ( uint256 _totalSupply , uint256 d ) _nonOptimalMintFee \uf0c1 function _nonOptimalMintFee ( ) internal returns ( uint256 token0Fee , uint256 token1Fee ) This fee is charged to cover for swapFee when users add unbalanced liquidity. getAssets \uf0c1 function getAssets ( ) public returns ( address [] assets ) getAmountOut \uf0c1 function getAmountOut ( ) public returns ( uint256 finalAmountOut ) getReserves \uf0c1 function getReserves ( ) public returns ( uint256 _reserve0 , uint256 _reserve1 ) getVirtualPrice \uf0c1 function getVirtualPrice ( ) public returns ( uint256 virtualPrice ) Events \uf0c1 Mint \uf0c1 event Mint ( ) Burn \uf0c1 event Burn ( ) Sync \uf0c1 event Sync ( )","title":"HybridPool"},{"location":"pool/HybridPool/#functions","text":"","title":"Functions"},{"location":"pool/HybridPool/#constructor","text":"function constructor ( ) public","title":"constructor"},{"location":"pool/HybridPool/#mint","text":"function mint ( ) public returns ( uint256 liquidity ) Mints LP tokens - should be called via the router after transferring bento tokens. The router must ensure that sufficient LP tokens are minted by using the return value.","title":"mint"},{"location":"pool/HybridPool/#burn","text":"function burn ( ) public returns ( struct IPool . TokenAmount [] withdrawnAmounts ) Burns LP tokens sent to this contract. The router must ensure that the user gets sufficient output tokens.","title":"burn"},{"location":"pool/HybridPool/#burnsingle","text":"function burnSingle ( ) public returns ( uint256 amountOut ) Burns LP tokens sent to this contract and swaps one of the output tokens for another i.e., the user gets a single token out by burning LP tokens.","title":"burnSingle"},{"location":"pool/HybridPool/#swap","text":"function swap ( ) public returns ( uint256 amountOut ) Swaps one token for another. The router must prefund this contract and ensure there isn\u2019t too much slippage.","title":"swap"},{"location":"pool/HybridPool/#flashswap","text":"function flashSwap ( ) public returns ( uint256 amountOut ) Swaps one token for another with payload. The router must support swap callbacks and ensure there isn\u2019t too much slippage.","title":"flashSwap"},{"location":"pool/HybridPool/#updatebarfee","text":"function updateBarFee ( ) public Updates barFee for Trident protocol.","title":"updateBarFee"},{"location":"pool/HybridPool/#_processswap","text":"function _processSwap ( ) internal","title":"_processSwap"},{"location":"pool/HybridPool/#_getreserves","text":"function _getReserves ( ) internal returns ( uint256 _reserve0 , uint256 _reserve1 )","title":"_getReserves"},{"location":"pool/HybridPool/#_getreservesandbalances","text":"function _getReservesAndBalances ( ) internal returns ( uint256 _reserve0 , uint256 _reserve1 , uint256 balance0 , uint256 balance1 )","title":"_getReservesAndBalances"},{"location":"pool/HybridPool/#_updatereserves","text":"function _updateReserves ( ) internal","title":"_updateReserves"},{"location":"pool/HybridPool/#_balance","text":"function _balance ( ) internal returns ( uint256 balance0 , uint256 balance1 )","title":"_balance"},{"location":"pool/HybridPool/#_getamountout","text":"function _getAmountOut ( ) internal returns ( uint256 dy )","title":"_getAmountOut"},{"location":"pool/HybridPool/#_transfer","text":"function _transfer ( ) internal","title":"_transfer"},{"location":"pool/HybridPool/#_computeliquidity","text":"function _computeLiquidity ( ) internal returns ( uint256 liquidity ) Get D, the StableSwap invariant, based on a set of balances and a particular A. See the StableSwap paper for details. Originally https://github.com/saddle-finance/saddle-contract/blob/0b76f7fb519e34b878aa1d58cffc8d8dc0572c12/contracts/SwapUtils.sol#L319 .","title":"_computeLiquidity"},{"location":"pool/HybridPool/#_computeliquidityfromadjustedbalances","text":"function _computeLiquidityFromAdjustedBalances ( ) internal returns ( uint256 computed )","title":"_computeLiquidityFromAdjustedBalances"},{"location":"pool/HybridPool/#_gety","text":"function _getY ( uint256 x ) internal returns ( uint256 y ) Calculate the new balances of the tokens given the indexes of the token that is swapped from (FROM) and the token that is swapped to (TO). This function is used as a helper function to calculate how much TO token the user should receive on swap. Originally https://github.com/saddle-finance/saddle-contract/blob/0b76f7fb519e34b878aa1d58cffc8d8dc0572c12/contracts/SwapUtils.sol#L432 .","title":"_getY"},{"location":"pool/HybridPool/#_mintfee","text":"function _mintFee ( ) internal returns ( uint256 _totalSupply , uint256 d )","title":"_mintFee"},{"location":"pool/HybridPool/#_nonoptimalmintfee","text":"function _nonOptimalMintFee ( ) internal returns ( uint256 token0Fee , uint256 token1Fee ) This fee is charged to cover for swapFee when users add unbalanced liquidity.","title":"_nonOptimalMintFee"},{"location":"pool/HybridPool/#getassets","text":"function getAssets ( ) public returns ( address [] assets )","title":"getAssets"},{"location":"pool/HybridPool/#getamountout","text":"function getAmountOut ( ) public returns ( uint256 finalAmountOut )","title":"getAmountOut"},{"location":"pool/HybridPool/#getreserves","text":"function getReserves ( ) public returns ( uint256 _reserve0 , uint256 _reserve1 )","title":"getReserves"},{"location":"pool/HybridPool/#getvirtualprice","text":"function getVirtualPrice ( ) public returns ( uint256 virtualPrice )","title":"getVirtualPrice"},{"location":"pool/HybridPool/#events","text":"","title":"Events"},{"location":"pool/HybridPool/#mint_1","text":"event Mint ( )","title":"Mint"},{"location":"pool/HybridPool/#burn_1","text":"event Burn ( )","title":"Burn"},{"location":"pool/HybridPool/#sync","text":"event Sync ( )","title":"Sync"},{"location":"pool/HybridPoolFactory/","text":"Contract for deploying Trident exchange Hybrid Pool with configurations. Functions \uf0c1 constructor \uf0c1 function constructor ( ) public deployPool \uf0c1 function deployPool ( ) external returns ( address pool )","title":"HybridPoolFactory"},{"location":"pool/HybridPoolFactory/#functions","text":"","title":"Functions"},{"location":"pool/HybridPoolFactory/#constructor","text":"function constructor ( ) public","title":"constructor"},{"location":"pool/HybridPoolFactory/#deploypool","text":"function deployPool ( ) external returns ( address pool )","title":"deployPool"},{"location":"pool/IndexPool/","text":"Trident exchange pool template with constant mean formula for swapping among an array of ERC-20 tokens. The reserves are stored as bento shares. The curve is applied to shares as well. This pool does not care about the underlying amounts. Functions \uf0c1 constructor \uf0c1 function constructor ( ) public mint \uf0c1 function mint ( ) public returns ( uint256 liquidity ) Mints LP tokens - should be called via the router after transferring bento tokens. The router must ensure that sufficient LP tokens are minted by using the return value. burn \uf0c1 function burn ( ) public returns ( struct IPool . TokenAmount [] withdrawnAmounts ) Burns LP tokens sent to this contract. The router must ensure that the user gets sufficient output tokens. burnSingle \uf0c1 function burnSingle ( ) public returns ( uint256 amountOut ) Burns LP tokens sent to this contract and swaps one of the output tokens for another i.e., the user gets a single token out by burning LP tokens. swap \uf0c1 function swap ( ) public returns ( uint256 amountOut ) Swaps one token for another. The router must prefund this contract and ensure there isn\u2019t too much slippage. flashSwap \uf0c1 function flashSwap ( ) public returns ( uint256 amountOut ) Swaps one token for another. The router must support swap callbacks and ensure there isn\u2019t too much slippage. updateBarFee \uf0c1 function updateBarFee ( ) public Updates barFee for Trident protocol. _balance \uf0c1 function _balance ( ) internal returns ( uint256 balance ) _getAmountOut \uf0c1 function _getAmountOut ( ) internal returns ( uint256 amountOut ) _compute \uf0c1 function _compute ( ) internal returns ( uint256 output ) _computeSingleOutGivenPoolIn \uf0c1 function _computeSingleOutGivenPoolIn ( ) internal returns ( uint256 amountOut ) _pow \uf0c1 function _pow ( ) internal returns ( uint256 output ) _powApprox \uf0c1 function _powApprox ( ) internal returns ( uint256 sum ) _subFlag \uf0c1 function _subFlag ( ) internal returns ( uint256 difference , bool flag ) _mul \uf0c1 function _mul ( ) internal returns ( uint256 c2 ) _div \uf0c1 function _div ( ) internal returns ( uint256 c2 ) _transfer \uf0c1 function _transfer ( ) internal getAssets \uf0c1 function getAssets ( ) public returns ( address [] assets ) getAmountOut \uf0c1 function getAmountOut ( ) public returns ( uint256 amountOut ) getReservesAndWeights \uf0c1 function getReservesAndWeights ( ) public returns ( uint256 [] reserves , uint136 [] weights ) Events \uf0c1 Mint \uf0c1 event Mint ( ) Burn \uf0c1 event Burn ( )","title":"IndexPool"},{"location":"pool/IndexPool/#functions","text":"","title":"Functions"},{"location":"pool/IndexPool/#constructor","text":"function constructor ( ) public","title":"constructor"},{"location":"pool/IndexPool/#mint","text":"function mint ( ) public returns ( uint256 liquidity ) Mints LP tokens - should be called via the router after transferring bento tokens. The router must ensure that sufficient LP tokens are minted by using the return value.","title":"mint"},{"location":"pool/IndexPool/#burn","text":"function burn ( ) public returns ( struct IPool . TokenAmount [] withdrawnAmounts ) Burns LP tokens sent to this contract. The router must ensure that the user gets sufficient output tokens.","title":"burn"},{"location":"pool/IndexPool/#burnsingle","text":"function burnSingle ( ) public returns ( uint256 amountOut ) Burns LP tokens sent to this contract and swaps one of the output tokens for another i.e., the user gets a single token out by burning LP tokens.","title":"burnSingle"},{"location":"pool/IndexPool/#swap","text":"function swap ( ) public returns ( uint256 amountOut ) Swaps one token for another. The router must prefund this contract and ensure there isn\u2019t too much slippage.","title":"swap"},{"location":"pool/IndexPool/#flashswap","text":"function flashSwap ( ) public returns ( uint256 amountOut ) Swaps one token for another. The router must support swap callbacks and ensure there isn\u2019t too much slippage.","title":"flashSwap"},{"location":"pool/IndexPool/#updatebarfee","text":"function updateBarFee ( ) public Updates barFee for Trident protocol.","title":"updateBarFee"},{"location":"pool/IndexPool/#_balance","text":"function _balance ( ) internal returns ( uint256 balance )","title":"_balance"},{"location":"pool/IndexPool/#_getamountout","text":"function _getAmountOut ( ) internal returns ( uint256 amountOut )","title":"_getAmountOut"},{"location":"pool/IndexPool/#_compute","text":"function _compute ( ) internal returns ( uint256 output )","title":"_compute"},{"location":"pool/IndexPool/#_computesingleoutgivenpoolin","text":"function _computeSingleOutGivenPoolIn ( ) internal returns ( uint256 amountOut )","title":"_computeSingleOutGivenPoolIn"},{"location":"pool/IndexPool/#_pow","text":"function _pow ( ) internal returns ( uint256 output )","title":"_pow"},{"location":"pool/IndexPool/#_powapprox","text":"function _powApprox ( ) internal returns ( uint256 sum )","title":"_powApprox"},{"location":"pool/IndexPool/#_subflag","text":"function _subFlag ( ) internal returns ( uint256 difference , bool flag )","title":"_subFlag"},{"location":"pool/IndexPool/#_mul","text":"function _mul ( ) internal returns ( uint256 c2 )","title":"_mul"},{"location":"pool/IndexPool/#_div","text":"function _div ( ) internal returns ( uint256 c2 )","title":"_div"},{"location":"pool/IndexPool/#_transfer","text":"function _transfer ( ) internal","title":"_transfer"},{"location":"pool/IndexPool/#getassets","text":"function getAssets ( ) public returns ( address [] assets )","title":"getAssets"},{"location":"pool/IndexPool/#getamountout","text":"function getAmountOut ( ) public returns ( uint256 amountOut )","title":"getAmountOut"},{"location":"pool/IndexPool/#getreservesandweights","text":"function getReservesAndWeights ( ) public returns ( uint256 [] reserves , uint136 [] weights )","title":"getReservesAndWeights"},{"location":"pool/IndexPool/#events","text":"","title":"Events"},{"location":"pool/IndexPool/#mint_1","text":"event Mint ( )","title":"Mint"},{"location":"pool/IndexPool/#burn_1","text":"event Burn ( )","title":"Burn"},{"location":"pool/IndexPoolFactory/","text":"Contract for deploying Trident exchange Index Pool with configurations. Functions \uf0c1 constructor \uf0c1 function constructor ( ) public deployPool \uf0c1 function deployPool ( ) external returns ( address pool )","title":"IndexPoolFactory"},{"location":"pool/IndexPoolFactory/#functions","text":"","title":"Functions"},{"location":"pool/IndexPoolFactory/#constructor","text":"function constructor ( ) public","title":"constructor"},{"location":"pool/IndexPoolFactory/#deploypool","text":"function deployPool ( ) external returns ( address pool )","title":"deployPool"},{"location":"pool/PoolDeployer/","text":"Trident pool deployer for whitelisted template factories. Functions \uf0c1 constructor \uf0c1 function constructor ( ) internal _registerPool \uf0c1 function _registerPool ( ) internal poolsCount \uf0c1 function poolsCount ( ) external returns ( uint256 count ) getPools \uf0c1 function getPools ( ) external returns ( address [] pairPools )","title":"PoolDeployer"},{"location":"pool/PoolDeployer/#functions","text":"","title":"Functions"},{"location":"pool/PoolDeployer/#constructor","text":"function constructor ( ) internal","title":"constructor"},{"location":"pool/PoolDeployer/#_registerpool","text":"function _registerPool ( ) internal","title":"_registerPool"},{"location":"pool/PoolDeployer/#poolscount","text":"function poolsCount ( ) external returns ( uint256 count )","title":"poolsCount"},{"location":"pool/PoolDeployer/#getpools","text":"function getPools ( ) external returns ( address [] pairPools )","title":"getPools"},{"location":"pool/TridentERC20/","text":"Trident pool ERC-20 with EIP-2612 extension. Functions \uf0c1 constructor \uf0c1 function constructor ( ) internal _calculateDomainSeparator \uf0c1 function _calculateDomainSeparator ( ) internal returns ( bytes32 domainSeperator ) DOMAIN_SEPARATOR \uf0c1 function DOMAIN_SEPARATOR ( ) public returns ( bytes32 domainSeperator ) EIP-712 typehash for this contract\u2019s domain. approve \uf0c1 function approve ( address spender , uint256 amount ) external returns ( bool ) Approves amount from msg.sender to be spent by spender . Parameters: Name Type Description spender address Address of the party that can pull tokens from msg.sender \u2018s account. amount uint256 The maximum collective amount that spender can pull. Return Values: Name Type Description Returns address \u2018true\u2019 if succeeded. transfer \uf0c1 function transfer ( address recipient , uint256 amount ) external returns ( bool ) Transfers amount tokens from msg.sender to recipient . Parameters: Name Type Description recipient address The address to move tokens to. amount uint256 The token amount to move. Return Values: Name Type Description Returns address \u2018true\u2019 if succeeded. transferFrom \uf0c1 function transferFrom ( address sender , address recipient , uint256 amount ) external returns ( bool ) Transfers amount tokens from sender to recipient . Caller needs approval from from . Parameters: Name Type Description sender address Address to pull tokens from . recipient address The address to move tokens to. amount uint256 The token amount to move. Return Values: Name Type Description Returns address \u2018true\u2019 if succeeded. permit \uf0c1 function permit ( address owner , address spender , uint256 amount , uint256 deadline , uint8 v , bytes32 r , bytes32 s ) external Triggers an approval from owner to spender . Parameters: Name Type Description owner address The address to approve from. spender address The address to be approved. amount uint256 The number of tokens that are approved (2^256-1 means infinite). deadline uint256 The time at which to expire the signature. v uint8 The recovery byte of the signature. r bytes32 Half of the ECDSA signature pair. s bytes32 Half of the ECDSA signature pair. _mint \uf0c1 function _mint ( ) internal _burn \uf0c1 function _burn ( ) internal Events \uf0c1 Transfer \uf0c1 event Transfer ( ) Approval \uf0c1 event Approval ( )","title":"TridentERC20"},{"location":"pool/TridentERC20/#functions","text":"","title":"Functions"},{"location":"pool/TridentERC20/#constructor","text":"function constructor ( ) internal","title":"constructor"},{"location":"pool/TridentERC20/#_calculatedomainseparator","text":"function _calculateDomainSeparator ( ) internal returns ( bytes32 domainSeperator )","title":"_calculateDomainSeparator"},{"location":"pool/TridentERC20/#domain_separator","text":"function DOMAIN_SEPARATOR ( ) public returns ( bytes32 domainSeperator ) EIP-712 typehash for this contract\u2019s domain.","title":"DOMAIN_SEPARATOR"},{"location":"pool/TridentERC20/#approve","text":"function approve ( address spender , uint256 amount ) external returns ( bool ) Approves amount from msg.sender to be spent by spender .","title":"approve"},{"location":"pool/TridentERC20/#transfer","text":"function transfer ( address recipient , uint256 amount ) external returns ( bool ) Transfers amount tokens from msg.sender to recipient .","title":"transfer"},{"location":"pool/TridentERC20/#transferfrom","text":"function transferFrom ( address sender , address recipient , uint256 amount ) external returns ( bool ) Transfers amount tokens from sender to recipient . Caller needs approval from from .","title":"transferFrom"},{"location":"pool/TridentERC20/#permit","text":"function permit ( address owner , address spender , uint256 amount , uint256 deadline , uint8 v , bytes32 r , bytes32 s ) external Triggers an approval from owner to spender .","title":"permit"},{"location":"pool/TridentERC20/#_mint","text":"function _mint ( ) internal","title":"_mint"},{"location":"pool/TridentERC20/#_burn","text":"function _burn ( ) internal","title":"_burn"},{"location":"pool/TridentERC20/#events","text":"","title":"Events"},{"location":"pool/TridentERC20/#transfer_1","text":"event Transfer ( )","title":"Transfer"},{"location":"pool/TridentERC20/#approval","text":"event Approval ( )","title":"Approval"},{"location":"pool/franchised/FranchisedConstantProductPool/","text":"Trident exchange franchised pool template with constant product formula for swapping between an ERC-20 token pair. The reserves are stored as bento shares. The curve is applied to shares as well. This pool does not care about the underlying amounts. Functions \uf0c1 constructor \uf0c1 function constructor ( ) public mint \uf0c1 function mint ( ) public returns ( uint256 liquidity ) Mints LP tokens - should be called via the router after transferring bento tokens. The router must ensure that sufficient LP tokens are minted by using the return value. burn \uf0c1 function burn ( ) public returns ( struct IPool . TokenAmount [] withdrawnAmounts ) Burns LP tokens sent to this contract. The router must ensure that the user gets sufficient output tokens. burnSingle \uf0c1 function burnSingle ( ) public returns ( uint256 amountOut ) Burns LP tokens sent to this contract and swaps one of the output tokens for another i.e., the user gets a single token out by burning LP tokens. swap \uf0c1 function swap ( ) public returns ( uint256 amountOut ) Swaps one token for another. The router must prefund this contract and ensure there isn\u2019t too much slippage. flashSwap \uf0c1 function flashSwap ( ) public returns ( uint256 amountOut ) Swaps one token for another. The router must support swap callbacks and ensure there isn\u2019t too much slippage. updateBarFee \uf0c1 function updateBarFee ( ) public Updates barFee for Trident protocol. _getReserves \uf0c1 function _getReserves ( ) internal returns ( uint112 _reserve0 , uint112 _reserve1 , uint32 _blockTimestampLast ) _balance \uf0c1 function _balance ( ) internal returns ( uint256 balance0 , uint256 balance1 ) _update \uf0c1 function _update ( ) internal _mintFee \uf0c1 function _mintFee ( ) internal returns ( uint256 liquidity ) _getAmountOut \uf0c1 function _getAmountOut ( ) internal returns ( uint256 amountOut ) _transfer \uf0c1 function _transfer ( ) internal _nonOptimalMintFee \uf0c1 function _nonOptimalMintFee ( ) internal returns ( uint256 token0Fee , uint256 token1Fee ) This fee is charged to cover for swapFee when users add unbalanced liquidity. getAssets \uf0c1 function getAssets ( ) public returns ( address [] assets ) getAmountOut \uf0c1 function getAmountOut ( ) public returns ( uint256 finalAmountOut ) getReserves \uf0c1 function getReserves ( ) public returns ( uint112 _reserve0 , uint112 _reserve1 , uint32 _blockTimestampLast ) Events \uf0c1 Mint \uf0c1 event Mint ( ) Burn \uf0c1 event Burn ( ) Sync \uf0c1 event Sync ( )","title":"FranchisedConstantProductPool"},{"location":"pool/franchised/FranchisedConstantProductPool/#functions","text":"","title":"Functions"},{"location":"pool/franchised/FranchisedConstantProductPool/#constructor","text":"function constructor ( ) public","title":"constructor"},{"location":"pool/franchised/FranchisedConstantProductPool/#mint","text":"function mint ( ) public returns ( uint256 liquidity ) Mints LP tokens - should be called via the router after transferring bento tokens. The router must ensure that sufficient LP tokens are minted by using the return value.","title":"mint"},{"location":"pool/franchised/FranchisedConstantProductPool/#burn","text":"function burn ( ) public returns ( struct IPool . TokenAmount [] withdrawnAmounts ) Burns LP tokens sent to this contract. The router must ensure that the user gets sufficient output tokens.","title":"burn"},{"location":"pool/franchised/FranchisedConstantProductPool/#burnsingle","text":"function burnSingle ( ) public returns ( uint256 amountOut ) Burns LP tokens sent to this contract and swaps one of the output tokens for another i.e., the user gets a single token out by burning LP tokens.","title":"burnSingle"},{"location":"pool/franchised/FranchisedConstantProductPool/#swap","text":"function swap ( ) public returns ( uint256 amountOut ) Swaps one token for another. The router must prefund this contract and ensure there isn\u2019t too much slippage.","title":"swap"},{"location":"pool/franchised/FranchisedConstantProductPool/#flashswap","text":"function flashSwap ( ) public returns ( uint256 amountOut ) Swaps one token for another. The router must support swap callbacks and ensure there isn\u2019t too much slippage.","title":"flashSwap"},{"location":"pool/franchised/FranchisedConstantProductPool/#updatebarfee","text":"function updateBarFee ( ) public Updates barFee for Trident protocol.","title":"updateBarFee"},{"location":"pool/franchised/FranchisedConstantProductPool/#_getreserves","text":"function _getReserves ( ) internal returns ( uint112 _reserve0 , uint112 _reserve1 , uint32 _blockTimestampLast )","title":"_getReserves"},{"location":"pool/franchised/FranchisedConstantProductPool/#_balance","text":"function _balance ( ) internal returns ( uint256 balance0 , uint256 balance1 )","title":"_balance"},{"location":"pool/franchised/FranchisedConstantProductPool/#_update","text":"function _update ( ) internal","title":"_update"},{"location":"pool/franchised/FranchisedConstantProductPool/#_mintfee","text":"function _mintFee ( ) internal returns ( uint256 liquidity )","title":"_mintFee"},{"location":"pool/franchised/FranchisedConstantProductPool/#_getamountout","text":"function _getAmountOut ( ) internal returns ( uint256 amountOut )","title":"_getAmountOut"},{"location":"pool/franchised/FranchisedConstantProductPool/#_transfer","text":"function _transfer ( ) internal","title":"_transfer"},{"location":"pool/franchised/FranchisedConstantProductPool/#_nonoptimalmintfee","text":"function _nonOptimalMintFee ( ) internal returns ( uint256 token0Fee , uint256 token1Fee ) This fee is charged to cover for swapFee when users add unbalanced liquidity.","title":"_nonOptimalMintFee"},{"location":"pool/franchised/FranchisedConstantProductPool/#getassets","text":"function getAssets ( ) public returns ( address [] assets )","title":"getAssets"},{"location":"pool/franchised/FranchisedConstantProductPool/#getamountout","text":"function getAmountOut ( ) public returns ( uint256 finalAmountOut )","title":"getAmountOut"},{"location":"pool/franchised/FranchisedConstantProductPool/#getreserves","text":"function getReserves ( ) public returns ( uint112 _reserve0 , uint112 _reserve1 , uint32 _blockTimestampLast )","title":"getReserves"},{"location":"pool/franchised/FranchisedConstantProductPool/#events","text":"","title":"Events"},{"location":"pool/franchised/FranchisedConstantProductPool/#mint_1","text":"event Mint ( )","title":"Mint"},{"location":"pool/franchised/FranchisedConstantProductPool/#burn_1","text":"event Burn ( )","title":"Burn"},{"location":"pool/franchised/FranchisedConstantProductPool/#sync","text":"event Sync ( )","title":"Sync"},{"location":"pool/franchised/FranchisedHybridPool/","text":"Trident exchange franchised pool template with hybrid like-kind formula for swapping between an ERC-20 token pair. The reserves are stored as bento shares. However, the stableswap invariant is applied to the underlying amounts. The API uses the underlying amounts. Functions \uf0c1 constructor \uf0c1 function constructor ( ) public mint \uf0c1 function mint ( ) public returns ( uint256 liquidity ) Mints LP tokens - should be called via the router after transferring bento tokens. The router must ensure that sufficient LP tokens are minted by using the return value. burn \uf0c1 function burn ( ) public returns ( struct IPool . TokenAmount [] withdrawnAmounts ) Burns LP tokens sent to this contract. The router must ensure that the user gets sufficient output tokens. burnSingle \uf0c1 function burnSingle ( ) public returns ( uint256 amountOut ) Burns LP tokens sent to this contract and swaps one of the output tokens for another i.e., the user gets a single token out by burning LP tokens. swap \uf0c1 function swap ( ) public returns ( uint256 amountOut ) Swaps one token for another. The router must prefund this contract and ensure there isn\u2019t too much slippage. flashSwap \uf0c1 function flashSwap ( ) public returns ( uint256 amountOut ) Swaps one token for another with payload. The router must support swap callbacks and ensure there isn\u2019t too much slippage. updateBarFee \uf0c1 function updateBarFee ( ) public Updates barFee for Trident protocol. _processSwap \uf0c1 function _processSwap ( ) internal _getReserves \uf0c1 function _getReserves ( ) internal returns ( uint256 _reserve0 , uint256 _reserve1 ) _updateReserves \uf0c1 function _updateReserves ( ) internal _balance \uf0c1 function _balance ( ) internal returns ( uint256 balance0 , uint256 balance1 ) __balance \uf0c1 function __balance ( ) internal returns ( uint256 balance ) _toAmount \uf0c1 function _toAmount ( ) internal returns ( uint256 output ) _toShare \uf0c1 function _toShare ( ) internal returns ( uint256 output ) _getAmountOut \uf0c1 function _getAmountOut ( ) internal returns ( uint256 dy ) _transfer \uf0c1 function _transfer ( ) internal _computeLiquidity \uf0c1 function _computeLiquidity ( ) internal returns ( uint256 liquidity ) Get D, the StableSwap invariant, based on a set of balances and a particular A. See the StableSwap paper for details. Originally https://github.com/saddle-finance/saddle-contract/blob/0b76f7fb519e34b878aa1d58cffc8d8dc0572c12/contracts/SwapUtils.sol#L319 . Return Values: Name Type Description liquidity uint256 The invariant, at the precision of the pool. _computeLiquidityFromAdjustedBalances \uf0c1 function _computeLiquidityFromAdjustedBalances ( ) internal returns ( uint256 computed ) _getY \uf0c1 function _getY ( uint256 x ) internal returns ( uint256 y ) Calculate the new balances of the tokens given the indexes of the token that is swapped from (FROM) and the token that is swapped to (TO). This function is used as a helper function to calculate how much TO token the user should receive on swap. Originally https://github.com/saddle-finance/saddle-contract/blob/0b76f7fb519e34b878aa1d58cffc8d8dc0572c12/contracts/SwapUtils.sol#L432 . Parameters: Name Type Description x uint256 The new total amount of FROM token. Return Values: Name Type Description y uint256 The amount of TO token that should remain in the pool. _getYD \uf0c1 function _getYD ( ) internal returns ( uint256 y ) Calculate the price of a token in the pool given precision-adjusted balances and a particular D and precision-adjusted array of balances. This is accomplished via solving the quadratic equation iteratively. See the StableSwap paper and Curve.fi implementation for further details. x*1**2 + x1 * (sum\u2019 - (A*n**n - 1) * D / (A _ n**n)) = D ** (n + 1) / (n ** (2 _ n) _ prod\u2019 * A) x_1**2 + b*x_1 = c x_1 = (x_1**2 + c) / (2*x_1 + b) Originally https://github.com/saddle-finance/saddle-contract/blob/0b76f7fb519e34b878aa1d58cffc8d8dc0572c12/contracts/SwapUtils.sol#L276 . Return Values: Name Type Description y uint256 The price of the token, in the same precision as in xp. _handleFee \uf0c1 function _handleFee ( ) internal returns ( uint256 fee ) _nonOptimalMintFee \uf0c1 function _nonOptimalMintFee ( ) internal returns ( uint256 token0Fee , uint256 token1Fee ) This fee is charged to cover for swapFee when users add unbalanced liquidity. getAssets \uf0c1 function getAssets ( ) public returns ( address [] assets ) getAmountOut \uf0c1 function getAmountOut ( ) public returns ( uint256 finalAmountOut ) getReserves \uf0c1 function getReserves ( ) public returns ( uint256 _reserve0 , uint256 _reserve1 ) Events \uf0c1 Mint \uf0c1 event Mint ( ) Burn \uf0c1 event Burn ( ) Sync \uf0c1 event Sync ( )","title":"FranchisedHybridPool"},{"location":"pool/franchised/FranchisedHybridPool/#functions","text":"","title":"Functions"},{"location":"pool/franchised/FranchisedHybridPool/#constructor","text":"function constructor ( ) public","title":"constructor"},{"location":"pool/franchised/FranchisedHybridPool/#mint","text":"function mint ( ) public returns ( uint256 liquidity ) Mints LP tokens - should be called via the router after transferring bento tokens. The router must ensure that sufficient LP tokens are minted by using the return value.","title":"mint"},{"location":"pool/franchised/FranchisedHybridPool/#burn","text":"function burn ( ) public returns ( struct IPool . TokenAmount [] withdrawnAmounts ) Burns LP tokens sent to this contract. The router must ensure that the user gets sufficient output tokens.","title":"burn"},{"location":"pool/franchised/FranchisedHybridPool/#burnsingle","text":"function burnSingle ( ) public returns ( uint256 amountOut ) Burns LP tokens sent to this contract and swaps one of the output tokens for another i.e., the user gets a single token out by burning LP tokens.","title":"burnSingle"},{"location":"pool/franchised/FranchisedHybridPool/#swap","text":"function swap ( ) public returns ( uint256 amountOut ) Swaps one token for another. The router must prefund this contract and ensure there isn\u2019t too much slippage.","title":"swap"},{"location":"pool/franchised/FranchisedHybridPool/#flashswap","text":"function flashSwap ( ) public returns ( uint256 amountOut ) Swaps one token for another with payload. The router must support swap callbacks and ensure there isn\u2019t too much slippage.","title":"flashSwap"},{"location":"pool/franchised/FranchisedHybridPool/#updatebarfee","text":"function updateBarFee ( ) public Updates barFee for Trident protocol.","title":"updateBarFee"},{"location":"pool/franchised/FranchisedHybridPool/#_processswap","text":"function _processSwap ( ) internal","title":"_processSwap"},{"location":"pool/franchised/FranchisedHybridPool/#_getreserves","text":"function _getReserves ( ) internal returns ( uint256 _reserve0 , uint256 _reserve1 )","title":"_getReserves"},{"location":"pool/franchised/FranchisedHybridPool/#_updatereserves","text":"function _updateReserves ( ) internal","title":"_updateReserves"},{"location":"pool/franchised/FranchisedHybridPool/#_balance","text":"function _balance ( ) internal returns ( uint256 balance0 , uint256 balance1 )","title":"_balance"},{"location":"pool/franchised/FranchisedHybridPool/#__balance","text":"function __balance ( ) internal returns ( uint256 balance )","title":"__balance"},{"location":"pool/franchised/FranchisedHybridPool/#_toamount","text":"function _toAmount ( ) internal returns ( uint256 output )","title":"_toAmount"},{"location":"pool/franchised/FranchisedHybridPool/#_toshare","text":"function _toShare ( ) internal returns ( uint256 output )","title":"_toShare"},{"location":"pool/franchised/FranchisedHybridPool/#_getamountout","text":"function _getAmountOut ( ) internal returns ( uint256 dy )","title":"_getAmountOut"},{"location":"pool/franchised/FranchisedHybridPool/#_transfer","text":"function _transfer ( ) internal","title":"_transfer"},{"location":"pool/franchised/FranchisedHybridPool/#_computeliquidity","text":"function _computeLiquidity ( ) internal returns ( uint256 liquidity ) Get D, the StableSwap invariant, based on a set of balances and a particular A. See the StableSwap paper for details. Originally https://github.com/saddle-finance/saddle-contract/blob/0b76f7fb519e34b878aa1d58cffc8d8dc0572c12/contracts/SwapUtils.sol#L319 .","title":"_computeLiquidity"},{"location":"pool/franchised/FranchisedHybridPool/#_computeliquidityfromadjustedbalances","text":"function _computeLiquidityFromAdjustedBalances ( ) internal returns ( uint256 computed )","title":"_computeLiquidityFromAdjustedBalances"},{"location":"pool/franchised/FranchisedHybridPool/#_gety","text":"function _getY ( uint256 x ) internal returns ( uint256 y ) Calculate the new balances of the tokens given the indexes of the token that is swapped from (FROM) and the token that is swapped to (TO). This function is used as a helper function to calculate how much TO token the user should receive on swap. Originally https://github.com/saddle-finance/saddle-contract/blob/0b76f7fb519e34b878aa1d58cffc8d8dc0572c12/contracts/SwapUtils.sol#L432 .","title":"_getY"},{"location":"pool/franchised/FranchisedHybridPool/#_getyd","text":"function _getYD ( ) internal returns ( uint256 y ) Calculate the price of a token in the pool given precision-adjusted balances and a particular D and precision-adjusted array of balances. This is accomplished via solving the quadratic equation iteratively. See the StableSwap paper and Curve.fi implementation for further details. x*1**2 + x1 * (sum\u2019 - (A*n**n - 1) * D / (A _ n**n)) = D ** (n + 1) / (n ** (2 _ n) _ prod\u2019 * A) x_1**2 + b*x_1 = c x_1 = (x_1**2 + c) / (2*x_1 + b) Originally https://github.com/saddle-finance/saddle-contract/blob/0b76f7fb519e34b878aa1d58cffc8d8dc0572c12/contracts/SwapUtils.sol#L276 .","title":"_getYD"},{"location":"pool/franchised/FranchisedHybridPool/#_handlefee","text":"function _handleFee ( ) internal returns ( uint256 fee )","title":"_handleFee"},{"location":"pool/franchised/FranchisedHybridPool/#_nonoptimalmintfee","text":"function _nonOptimalMintFee ( ) internal returns ( uint256 token0Fee , uint256 token1Fee ) This fee is charged to cover for swapFee when users add unbalanced liquidity.","title":"_nonOptimalMintFee"},{"location":"pool/franchised/FranchisedHybridPool/#getassets","text":"function getAssets ( ) public returns ( address [] assets )","title":"getAssets"},{"location":"pool/franchised/FranchisedHybridPool/#getamountout","text":"function getAmountOut ( ) public returns ( uint256 finalAmountOut )","title":"getAmountOut"},{"location":"pool/franchised/FranchisedHybridPool/#getreserves","text":"function getReserves ( ) public returns ( uint256 _reserve0 , uint256 _reserve1 )","title":"getReserves"},{"location":"pool/franchised/FranchisedHybridPool/#events","text":"","title":"Events"},{"location":"pool/franchised/FranchisedHybridPool/#mint_1","text":"event Mint ( )","title":"Mint"},{"location":"pool/franchised/FranchisedHybridPool/#burn_1","text":"event Burn ( )","title":"Burn"},{"location":"pool/franchised/FranchisedHybridPool/#sync","text":"event Sync ( )","title":"Sync"},{"location":"pool/franchised/FranchisedIndexPool/","text":"Trident exchange franchised pool template with constant mean formula for swapping among an array of ERC-20 tokens. The reserves are stored as bento shares. The curve is applied to shares as well. This pool does not care about the underlying amounts. Functions \uf0c1 constructor \uf0c1 function constructor ( ) public mint \uf0c1 function mint ( ) public returns ( uint256 liquidity ) Mints LP tokens - should be called via the router after transferring bento tokens. The router must ensure that sufficient LP tokens are minted by using the return value. burn \uf0c1 function burn ( ) public returns ( struct IPool . TokenAmount [] withdrawnAmounts ) Burns LP tokens sent to this contract. The router must ensure that the user gets sufficient output tokens. burnSingle \uf0c1 function burnSingle ( ) public returns ( uint256 amountOut ) Burns LP tokens sent to this contract and swaps one of the output tokens for another i.e., the user gets a single token out by burning LP tokens. swap \uf0c1 function swap ( ) public returns ( uint256 amountOut ) Swaps one token for another. The router must prefund this contract and ensure there isn\u2019t too much slippage. flashSwap \uf0c1 function flashSwap ( ) public returns ( uint256 amountOut ) Swaps one token for another. The router must support swap callbacks and ensure there isn\u2019t too much slippage. updateBarFee \uf0c1 function updateBarFee ( ) public Updates barFee for Trident protocol. _balance \uf0c1 function _balance ( ) internal returns ( uint256 balance ) _getAmountOut \uf0c1 function _getAmountOut ( ) internal returns ( uint256 amountOut ) _compute \uf0c1 function _compute ( ) internal returns ( uint256 output ) _computeSingleOutGivenPoolIn \uf0c1 function _computeSingleOutGivenPoolIn ( ) internal returns ( uint256 amountOut ) _pow \uf0c1 function _pow ( ) internal returns ( uint256 output ) _powApprox \uf0c1 function _powApprox ( ) internal returns ( uint256 sum ) _subFlag \uf0c1 function _subFlag ( ) internal returns ( uint256 difference , bool flag ) _mul \uf0c1 function _mul ( ) internal returns ( uint256 c2 ) _div \uf0c1 function _div ( ) internal returns ( uint256 c2 ) _transfer \uf0c1 function _transfer ( ) internal getAssets \uf0c1 function getAssets ( ) public returns ( address [] assets ) getAmountOut \uf0c1 function getAmountOut ( ) public returns ( uint256 amountOut ) getReservesAndWeights \uf0c1 function getReservesAndWeights ( ) public returns ( uint256 [] reserves , uint136 [] weights ) Events \uf0c1 Mint \uf0c1 event Mint ( ) Burn \uf0c1 event Burn ( )","title":"FranchisedIndexPool"},{"location":"pool/franchised/FranchisedIndexPool/#functions","text":"","title":"Functions"},{"location":"pool/franchised/FranchisedIndexPool/#constructor","text":"function constructor ( ) public","title":"constructor"},{"location":"pool/franchised/FranchisedIndexPool/#mint","text":"function mint ( ) public returns ( uint256 liquidity ) Mints LP tokens - should be called via the router after transferring bento tokens. The router must ensure that sufficient LP tokens are minted by using the return value.","title":"mint"},{"location":"pool/franchised/FranchisedIndexPool/#burn","text":"function burn ( ) public returns ( struct IPool . TokenAmount [] withdrawnAmounts ) Burns LP tokens sent to this contract. The router must ensure that the user gets sufficient output tokens.","title":"burn"},{"location":"pool/franchised/FranchisedIndexPool/#burnsingle","text":"function burnSingle ( ) public returns ( uint256 amountOut ) Burns LP tokens sent to this contract and swaps one of the output tokens for another i.e., the user gets a single token out by burning LP tokens.","title":"burnSingle"},{"location":"pool/franchised/FranchisedIndexPool/#swap","text":"function swap ( ) public returns ( uint256 amountOut ) Swaps one token for another. The router must prefund this contract and ensure there isn\u2019t too much slippage.","title":"swap"},{"location":"pool/franchised/FranchisedIndexPool/#flashswap","text":"function flashSwap ( ) public returns ( uint256 amountOut ) Swaps one token for another. The router must support swap callbacks and ensure there isn\u2019t too much slippage.","title":"flashSwap"},{"location":"pool/franchised/FranchisedIndexPool/#updatebarfee","text":"function updateBarFee ( ) public Updates barFee for Trident protocol.","title":"updateBarFee"},{"location":"pool/franchised/FranchisedIndexPool/#_balance","text":"function _balance ( ) internal returns ( uint256 balance )","title":"_balance"},{"location":"pool/franchised/FranchisedIndexPool/#_getamountout","text":"function _getAmountOut ( ) internal returns ( uint256 amountOut )","title":"_getAmountOut"},{"location":"pool/franchised/FranchisedIndexPool/#_compute","text":"function _compute ( ) internal returns ( uint256 output )","title":"_compute"},{"location":"pool/franchised/FranchisedIndexPool/#_computesingleoutgivenpoolin","text":"function _computeSingleOutGivenPoolIn ( ) internal returns ( uint256 amountOut )","title":"_computeSingleOutGivenPoolIn"},{"location":"pool/franchised/FranchisedIndexPool/#_pow","text":"function _pow ( ) internal returns ( uint256 output )","title":"_pow"},{"location":"pool/franchised/FranchisedIndexPool/#_powapprox","text":"function _powApprox ( ) internal returns ( uint256 sum )","title":"_powApprox"},{"location":"pool/franchised/FranchisedIndexPool/#_subflag","text":"function _subFlag ( ) internal returns ( uint256 difference , bool flag )","title":"_subFlag"},{"location":"pool/franchised/FranchisedIndexPool/#_mul","text":"function _mul ( ) internal returns ( uint256 c2 )","title":"_mul"},{"location":"pool/franchised/FranchisedIndexPool/#_div","text":"function _div ( ) internal returns ( uint256 c2 )","title":"_div"},{"location":"pool/franchised/FranchisedIndexPool/#_transfer","text":"function _transfer ( ) internal","title":"_transfer"},{"location":"pool/franchised/FranchisedIndexPool/#getassets","text":"function getAssets ( ) public returns ( address [] assets )","title":"getAssets"},{"location":"pool/franchised/FranchisedIndexPool/#getamountout","text":"function getAmountOut ( ) public returns ( uint256 amountOut )","title":"getAmountOut"},{"location":"pool/franchised/FranchisedIndexPool/#getreservesandweights","text":"function getReservesAndWeights ( ) public returns ( uint256 [] reserves , uint136 [] weights )","title":"getReservesAndWeights"},{"location":"pool/franchised/FranchisedIndexPool/#events","text":"","title":"Events"},{"location":"pool/franchised/FranchisedIndexPool/#mint_1","text":"event Mint ( )","title":"Mint"},{"location":"pool/franchised/FranchisedIndexPool/#burn_1","text":"event Burn ( )","title":"Burn"},{"location":"pool/franchised/TridentFranchisedERC20/","text":"Trident franchised pool ERC-20 with EIP-2612 extension. Functions \uf0c1 constructor \uf0c1 function constructor ( ) internal initialize \uf0c1 function initialize ( ) internal Initializes whitelist settings from pool. approve \uf0c1 function approve ( address spender , uint256 amount ) external returns ( bool ) Approves amount from msg.sender to be spent by spender . Parameters: Name Type Description spender address Address of the party that can pull tokens from msg.sender \u2018s account. amount uint256 The maximum collective amount that spender can pull. Return Values: Name Type Description Returns address \u2018true\u2019 if succeeded. transfer \uf0c1 function transfer ( address recipient , uint256 amount ) external returns ( bool ) Transfers amount tokens from msg.sender to recipient . Parameters: Name Type Description recipient address The address to move tokens to. amount uint256 The token amount to move. Return Values: Name Type Description Returns address \u2018true\u2019 if succeeded. transferFrom \uf0c1 function transferFrom ( address sender , address recipient , uint256 amount ) external returns ( bool ) Transfers amount tokens from sender to recipient . Caller needs approval from from . Parameters: Name Type Description sender address Address to pull tokens from . recipient address The address to move tokens to. amount uint256 The token amount to move. Return Values: Name Type Description Returns address \u2018true\u2019 if succeeded. permit \uf0c1 function permit ( address owner , address spender , uint256 amount , uint256 deadline , uint8 v , bytes32 r , bytes32 s ) external Triggers an approval from owner to spender . Parameters: Name Type Description owner address The address to approve from. spender address The address to be approved. amount uint256 The number of tokens that are approved (2^256-1 means infinite). deadline uint256 The time at which to expire the signature. v uint8 The recovery byte of the signature. r bytes32 Half of the ECDSA signature pair. s bytes32 Half of the ECDSA signature pair. _mint \uf0c1 function _mint ( ) internal _burn \uf0c1 function _burn ( ) internal _checkWhiteList \uf0c1 function _checkWhiteList ( ) internal Checks whiteListManager for pool operator and given user account . Events \uf0c1 Approval \uf0c1 event Approval ( ) Transfer \uf0c1 event Transfer ( )","title":"TridentFranchisedERC20"},{"location":"pool/franchised/TridentFranchisedERC20/#functions","text":"","title":"Functions"},{"location":"pool/franchised/TridentFranchisedERC20/#constructor","text":"function constructor ( ) internal","title":"constructor"},{"location":"pool/franchised/TridentFranchisedERC20/#initialize","text":"function initialize ( ) internal Initializes whitelist settings from pool.","title":"initialize"},{"location":"pool/franchised/TridentFranchisedERC20/#approve","text":"function approve ( address spender , uint256 amount ) external returns ( bool ) Approves amount from msg.sender to be spent by spender .","title":"approve"},{"location":"pool/franchised/TridentFranchisedERC20/#transfer","text":"function transfer ( address recipient , uint256 amount ) external returns ( bool ) Transfers amount tokens from msg.sender to recipient .","title":"transfer"},{"location":"pool/franchised/TridentFranchisedERC20/#transferfrom","text":"function transferFrom ( address sender , address recipient , uint256 amount ) external returns ( bool ) Transfers amount tokens from sender to recipient . Caller needs approval from from .","title":"transferFrom"},{"location":"pool/franchised/TridentFranchisedERC20/#permit","text":"function permit ( address owner , address spender , uint256 amount , uint256 deadline , uint8 v , bytes32 r , bytes32 s ) external Triggers an approval from owner to spender .","title":"permit"},{"location":"pool/franchised/TridentFranchisedERC20/#_mint","text":"function _mint ( ) internal","title":"_mint"},{"location":"pool/franchised/TridentFranchisedERC20/#_burn","text":"function _burn ( ) internal","title":"_burn"},{"location":"pool/franchised/TridentFranchisedERC20/#_checkwhitelist","text":"function _checkWhiteList ( ) internal Checks whiteListManager for pool operator and given user account .","title":"_checkWhiteList"},{"location":"pool/franchised/TridentFranchisedERC20/#events","text":"","title":"Events"},{"location":"pool/franchised/TridentFranchisedERC20/#approval","text":"event Approval ( )","title":"Approval"},{"location":"pool/franchised/TridentFranchisedERC20/#transfer_1","text":"event Transfer ( )","title":"Transfer"},{"location":"pool/franchised/WhiteListManager/","text":"Functions \uf0c1 DOMAIN_SEPARATOR \uf0c1 function DOMAIN_SEPARATOR ( ) public returns ( bytes32 domainSeperator ) whitelistAccount \uf0c1 function whitelistAccount ( ) external setWhitelisting \uf0c1 function setWhitelisting ( address operator , address account , bool approved , uint256 deadline , uint8 v , bytes32 r , bytes32 s ) external Approves or revokes whitelisting for accounts. Parameters: Name Type Description operator address The address of the operator that approves or revokes access. account address The address who gains or loses access. approved bool If \u2018true\u2019, approves access - if \u2018false\u2019, revokes access. deadline uint256 The time at which to expire the signature. v uint8 The recovery byte of the signature. r bytes32 Half of the ECDSA signature pair. s bytes32 Half of the ECDSA signature pair. isWhitelisted \uf0c1 function isWhitelisted ( ) public returns ( bool success ) **** WHITELISTING Adapted from OpenZeppelin utilities and Uniswap merkle distributor. joinWhitelist \uf0c1 function joinWhitelist ( ) external setMerkleRoot \uf0c1 function setMerkleRoot ( ) external Events \uf0c1 WhiteListAccount \uf0c1 event WhiteListAccount ( ) SetMerkleRoot \uf0c1 event SetMerkleRoot ( ) JoinWithMerkle \uf0c1 event JoinWithMerkle ( )","title":"WhiteListManager"},{"location":"pool/franchised/WhiteListManager/#functions","text":"","title":"Functions"},{"location":"pool/franchised/WhiteListManager/#domain_separator","text":"function DOMAIN_SEPARATOR ( ) public returns ( bytes32 domainSeperator )","title":"DOMAIN_SEPARATOR"},{"location":"pool/franchised/WhiteListManager/#whitelistaccount","text":"function whitelistAccount ( ) external","title":"whitelistAccount"},{"location":"pool/franchised/WhiteListManager/#setwhitelisting","text":"function setWhitelisting ( address operator , address account , bool approved , uint256 deadline , uint8 v , bytes32 r , bytes32 s ) external Approves or revokes whitelisting for accounts.","title":"setWhitelisting"},{"location":"pool/franchised/WhiteListManager/#iswhitelisted","text":"function isWhitelisted ( ) public returns ( bool success ) **** WHITELISTING Adapted from OpenZeppelin utilities and Uniswap merkle distributor.","title":"isWhitelisted"},{"location":"pool/franchised/WhiteListManager/#joinwhitelist","text":"function joinWhitelist ( ) external","title":"joinWhitelist"},{"location":"pool/franchised/WhiteListManager/#setmerkleroot","text":"function setMerkleRoot ( ) external","title":"setMerkleRoot"},{"location":"pool/franchised/WhiteListManager/#events","text":"","title":"Events"},{"location":"pool/franchised/WhiteListManager/#whitelistaccount_1","text":"event WhiteListAccount ( )","title":"WhiteListAccount"},{"location":"pool/franchised/WhiteListManager/#setmerkleroot_1","text":"event SetMerkleRoot ( )","title":"SetMerkleRoot"},{"location":"pool/franchised/WhiteListManager/#joinwithmerkle","text":"event JoinWithMerkle ( )","title":"JoinWithMerkle"},{"location":"utils/TridentHelper/","text":"Trident router helper contract. Functions \uf0c1 constructor \uf0c1 function constructor ( ) public batch \uf0c1 function batch ( bytes [] data ) external returns ( bytes [] results ) Provides batch function calls for this contract and returns the data from all of them if they all succeed. Adapted from https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/base/Multicall.sol , License-Identifier: GPL-2.0-or-later. The msg.value should not be trusted for any method callable from this function. Parameters: Name Type Description data bytes[] ABI-encoded params for each of the calls to make to this contract. Return Values: Name Type Description results bytes[] The results from each of the calls passed in via data . balanceOfThis \uf0c1 function balanceOfThis ( address token ) internal returns ( uint256 balance ) Provides gas-optimized balance check on this contract to avoid redundant extcodesize check in addition to returndatasize check. Parameters: Name Type Description token address Address of ERC-20 token. Return Values: Name Type Description balance address Token amount held by this contract. permitThis \uf0c1 function permitThis ( address token , uint256 amount , uint256 deadline , uint8 v , bytes32 r , bytes32 s ) external Provides EIP-2612 signed approval for this contract to spend user tokens. Parameters: Name Type Description token address Address of ERC-20 token. amount uint256 Token amount to grant spending right over. deadline uint256 Termination for signed approval (UTC timestamp in seconds). v uint8 The recovery byte of the signature. r bytes32 Half of the ECDSA signature pair. s bytes32 Half of the ECDSA signature pair. permitThisAllowed \uf0c1 function permitThisAllowed ( address token , uint256 nonce , uint256 expiry , uint8 v , bytes32 r , bytes32 s ) external Provides DAI-derived signed approval for this contract to spend user tokens. Parameters: Name Type Description token address Address of ERC-20 token. nonce uint256 Token owner\u2019s nonce - increases at each call to expiry uint256 Termination for signed approval - UTC timestamp in seconds. v uint8 The recovery byte of the signature. r bytes32 Half of the ECDSA signature pair. s bytes32 Half of the ECDSA signature pair. safeTransfer \uf0c1 function safeTransfer ( address token , address recipient , uint256 amount ) internal Provides \u2018safe\u2019 ERC-20 {transfer} for tokens that don\u2019t consistently return true/false. Parameters: Name Type Description token address Address of ERC-20 token. recipient address Account to send tokens to. amount uint256 Token amount to send. safeTransferFrom \uf0c1 function safeTransferFrom ( address token , address sender , address recipient , uint256 amount ) internal Provides \u2018safe\u2019 ERC-20 {transferFrom} for tokens that don\u2019t consistently return true/false. Parameters: Name Type Description token address Address of ERC-20 token. sender address Account to send tokens from. recipient address Account to send tokens to. amount uint256 Token amount to send. withdrawFromWETH \uf0c1 function withdrawFromWETH ( uint256 amount ) internal Provides low-level wETH {withdraw}. Parameters: Name Type Description amount uint256 Token amount to unwrap into ETH. safeTransferETH \uf0c1 function safeTransferETH ( address recipient , uint256 amount ) internal Provides \u2018safe\u2019 ETH transfer. Parameters: Name Type Description recipient address Account to send ETH to. amount uint256 ETH amount to send. getSelector \uf0c1 function getSelector ( bytes _data ) internal returns ( bytes4 sig ) function to extract the selector of a bytes calldata Parameters: Name Type Description _data bytes the calldata bytes","title":"TridentHelper"},{"location":"utils/TridentHelper/#functions","text":"","title":"Functions"},{"location":"utils/TridentHelper/#constructor","text":"function constructor ( ) public","title":"constructor"},{"location":"utils/TridentHelper/#batch","text":"function batch ( bytes [] data ) external returns ( bytes [] results ) Provides batch function calls for this contract and returns the data from all of them if they all succeed. Adapted from https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/base/Multicall.sol , License-Identifier: GPL-2.0-or-later. The msg.value should not be trusted for any method callable from this function.","title":"batch"},{"location":"utils/TridentHelper/#balanceofthis","text":"function balanceOfThis ( address token ) internal returns ( uint256 balance ) Provides gas-optimized balance check on this contract to avoid redundant extcodesize check in addition to returndatasize check.","title":"balanceOfThis"},{"location":"utils/TridentHelper/#permitthis","text":"function permitThis ( address token , uint256 amount , uint256 deadline , uint8 v , bytes32 r , bytes32 s ) external Provides EIP-2612 signed approval for this contract to spend user tokens.","title":"permitThis"},{"location":"utils/TridentHelper/#permitthisallowed","text":"function permitThisAllowed ( address token , uint256 nonce , uint256 expiry , uint8 v , bytes32 r , bytes32 s ) external Provides DAI-derived signed approval for this contract to spend user tokens.","title":"permitThisAllowed"},{"location":"utils/TridentHelper/#safetransfer","text":"function safeTransfer ( address token , address recipient , uint256 amount ) internal Provides \u2018safe\u2019 ERC-20 {transfer} for tokens that don\u2019t consistently return true/false.","title":"safeTransfer"},{"location":"utils/TridentHelper/#safetransferfrom","text":"function safeTransferFrom ( address token , address sender , address recipient , uint256 amount ) internal Provides \u2018safe\u2019 ERC-20 {transferFrom} for tokens that don\u2019t consistently return true/false.","title":"safeTransferFrom"},{"location":"utils/TridentHelper/#withdrawfromweth","text":"function withdrawFromWETH ( uint256 amount ) internal Provides low-level wETH {withdraw}.","title":"withdrawFromWETH"},{"location":"utils/TridentHelper/#safetransfereth","text":"function safeTransferETH ( address recipient , uint256 amount ) internal Provides \u2018safe\u2019 ETH transfer.","title":"safeTransferETH"},{"location":"utils/TridentHelper/#getselector","text":"function getSelector ( bytes _data ) internal returns ( bytes4 sig ) function to extract the selector of a bytes calldata","title":"getSelector"},{"location":"utils/TridentOwnable/","text":"Trident access control contract. Functions \uf0c1 constructor \uf0c1 function constructor ( ) public Initialize and grant deployer account ( msg.sender ) owner access role. claimOwner \uf0c1 function claimOwner ( ) external pendingOwner can claim owner account. transferOwner \uf0c1 function transferOwner ( address recipient , bool direct ) external Transfer owner account. Parameters: Name Type Description recipient address Account granted owner access control. direct bool If \u2018true\u2019, ownership is directly transferred. Events \uf0c1 TransferOwner \uf0c1 event TransferOwner ( ) TransferOwnerClaim \uf0c1 event TransferOwnerClaim ( )","title":"TridentOwnable"},{"location":"utils/TridentOwnable/#functions","text":"","title":"Functions"},{"location":"utils/TridentOwnable/#constructor","text":"function constructor ( ) public Initialize and grant deployer account ( msg.sender ) owner access role.","title":"constructor"},{"location":"utils/TridentOwnable/#claimowner","text":"function claimOwner ( ) external pendingOwner can claim owner account.","title":"claimOwner"},{"location":"utils/TridentOwnable/#transferowner","text":"function transferOwner ( address recipient , bool direct ) external Transfer owner account.","title":"transferOwner"},{"location":"utils/TridentOwnable/#events","text":"","title":"Events"},{"location":"utils/TridentOwnable/#transferowner_1","text":"event TransferOwner ( )","title":"TransferOwner"},{"location":"utils/TridentOwnable/#transferownerclaim","text":"event TransferOwnerClaim ( )","title":"TransferOwnerClaim"},{"location":"workInProgress/IERC20/","text":"Functions \uf0c1 totalSupply \uf0c1 function totalSupply ( ) external returns ( uint256 )","title":"IERC20"},{"location":"workInProgress/IERC20/#functions","text":"","title":"Functions"},{"location":"workInProgress/IERC20/#totalsupply","text":"function totalSupply ( ) external returns ( uint256 )","title":"totalSupply"},{"location":"workInProgress/IMigrator/","text":"Functions \uf0c1 desiredLiquidity \uf0c1 function desiredLiquidity ( ) external returns ( uint256 )","title":"IMigrator"},{"location":"workInProgress/IMigrator/#functions","text":"","title":"Functions"},{"location":"workInProgress/IMigrator/#desiredliquidity","text":"function desiredLiquidity ( ) external returns ( uint256 )","title":"desiredLiquidity"},{"location":"workInProgress/Migrator/","text":"Functions \uf0c1 constructor \uf0c1 function constructor ( ) public migrate \uf0c1 function migrate ( ) public returns ( contract IPool )","title":"Migrator"},{"location":"workInProgress/Migrator/#functions","text":"","title":"Functions"},{"location":"workInProgress/Migrator/#constructor","text":"function constructor ( ) public","title":"constructor"},{"location":"workInProgress/Migrator/#migrate","text":"function migrate ( ) public returns ( contract IPool )","title":"migrate"}]}